<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang.Xu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-12T09:01:34.430Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yang.Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2018/03/12/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/03/12/闭包/</id>
    <published>2018-03-12T10:01:27.000Z</published>
    <updated>2018-03-12T09:01:34.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p></blockquote><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ol><li>让函数外可以访问函数内成员</li><li>让函数内成员始终活在内存中，生命周期延长。</li><li>解决变量污染（只读不改）面向对象封装思想<ul><li>减少变量声明</li></ul></li><li>控制某些数据访问权限（过滤非法数据）</li></ol><ul><li>闭包不能滥用，否则会导致内存泄露，影响网页的性能。闭包使用完了后，要立即释放资源，将引用变量指向null。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;闭包就是能够读取其他函数内部变量的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Canvas动画</title>
    <link href="http://yoursite.com/2018/03/01/Canvas%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2018/03/01/Canvas动画/</id>
    <published>2018-03-01T10:27:09.000Z</published>
    <updated>2018-03-12T06:43:23.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画与变形"><a href="#动画与变形" class="headerlink" title="动画与变形"></a>动画与变形</h2><h3 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h3><ol><li>动画的原理，就是一张张画面连续快速播放，当速度超过每秒24张时，人的肉眼就不会分辨出卡顿感。而觉得是在播放连续的视频动画</li><li>所以， 我们要实现动画，只需要隔十几毫秒把屏幕清空之后，重新绘制下一帧就可以了</li></ol><h3 id="执行动画方案"><a href="#执行动画方案" class="headerlink" title="执行动画方案"></a>执行动画方案</h3><ol><li>我们可以用window.setInterval(), window.setTimeout(),和window.requestAnimationFrame()来设定定期执行一个指定函数。</li><li>setInterval(function, delay): 当设定好间隔时间后，function会定期执行。</li><li>setTimeout(function, delay): 在设定好的时间之后执行函数</li><li>requestAnimationFrame(callback): 递归调用的形式才实现动画，动画的频率跟随浏览器的刷新频率，效率比较高，连续动画都使用这种方式就可以了</li></ol><h3 id="弹球动画讲解"><a href="#弹球动画讲解" class="headerlink" title="弹球动画讲解"></a>弹球动画讲解</h3><ol><li><p>先实现绘制某一帧的方法(draw())</p><ol><li>清空canvas</li><li>绘制小球</li><li>更改小球的位置</li></ol></li><li><p>添加一个动画(window.requesAnimationFrame(draw))</p></li><li><p>边界处理</p><ul><li>如果小球到达边界，修改其速度为反方向；</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">    <span class="keyword">var</span> animation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个圆对象</span></span><br><span class="line">    <span class="keyword">var</span> circle = &#123;</span><br><span class="line">        radias: <span class="number">30</span>,</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        speedx: <span class="number">2</span>,</span><br><span class="line">        speedy: <span class="number">1</span>,</span><br><span class="line">        isRunning: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//画一个圆</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radias, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//每一帧，圆的位置都会发生变化</span></span><br><span class="line">        circle.x += circle.speedx;</span><br><span class="line">        circle.y += circle.speedy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//边界判断，到了边界就调头</span></span><br><span class="line">        <span class="keyword">if</span> (circle.x == canvas.width-circle.radias || circle.x == circle.radias) &#123;</span><br><span class="line">            circle.speedx = -circle.speedx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (circle.y == canvas.height-circle.radias || circle.y == circle.radias) &#123;</span><br><span class="line">            circle.speedy = -circle.speedy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制小球，绘制当前帧，把上一帧的画面清空</span></span><br><span class="line">        <span class="comment">//ctx.clearRect(0, 0, canvas.width, canvas.height);</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.fillStyle = <span class="string">"rgba(255,255,255,0.2)"</span>;</span><br><span class="line">        <span class="comment">//ctx.fillStyle = "red";</span></span><br><span class="line">        ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br><span class="line">        ctx.restore();</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始执行动画</span></span><br><span class="line">        animation = <span class="built_in">window</span>.requestAnimationFrame(draw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加点击事件，当点击时，如果正在运行，则暂停，如果没有正在运行，则点击动行</span></span><br><span class="line">    canvas.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!circle.isRunning) &#123;</span><br><span class="line">            circle.x = e.clientX;</span><br><span class="line">            circle.y = e.clientY;</span><br><span class="line">            animation = <span class="built_in">window</span>.requestAnimationFrame(draw);</span><br><span class="line">            circle.isRunning = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            circle.isRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">window</span>.cancelAnimationFrame(animation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><ol><li><p>scale是用来缩放画布元素的坐标和宽高。如果一张（100*100）的画布，scale为（0.5, 0.5），用fillRect(50, 50, 50, 50)来画一个正方形，实际显示效果未缩放前的（25, 25, 25, 25）位置和大小的效果是一样的。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔的粗细和颜色</span></span><br><span class="line">    ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将画笔移动到某个点</span></span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2. 从上面这个点开始，划一条直接到某一个点</span></span><br><span class="line">    ctx.lineTo(<span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="comment">//3. 填充颜色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"></span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    ctx.scale(<span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h4><ol><li><p>平移就是改变往水平或垂直方向，改变参考原点的值。translate(100, 100);就是绘图时，在当前参考原点的基本之上，向右平移100像素，向下平移100像素。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔的粗细和颜色</span></span><br><span class="line">    ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将画笔移动到某个点</span></span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2. 从上面这个点开始，划一条直接到某一个点</span></span><br><span class="line">    ctx.lineTo(<span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="comment">//3. 填充颜色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"></span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><ol><li><p>旋转，就是围绕当前的原点，坐标系发生旋转。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画30条直线，角度不一样</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++) &#123;</span><br><span class="line">        ctx.rotate(<span class="number">1</span>/<span class="number">15</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.restore();</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画与变形&quot;&gt;&lt;a href=&quot;#动画与变形&quot; class=&quot;headerlink&quot; title=&quot;动画与变形&quot;&gt;&lt;/a&gt;动画与变形&lt;/h2&gt;&lt;h3 id=&quot;动画原理&quot;&gt;&lt;a href=&quot;#动画原理&quot; class=&quot;headerlink&quot; title=&quot;动画原理&quot;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化总结</title>
    <link href="http://yoursite.com/2018/02/26/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/02/26/前端性能优化工作总结/</id>
    <published>2018-02-26T14:03:55.000Z</published>
    <updated>2018-03-16T05:11:03.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能优化总结"><a href="#性能优化总结" class="headerlink" title="性能优化总结"></a>性能优化总结</h2><h3 id="1-减少http请求"><a href="#1-减少http请求" class="headerlink" title="1. 减少http请求"></a>1. 减少http请求</h3><p>​    减少http的主要手段是合并CSS、合并javascript、合并图片。将浏览器一次访问需要的javascript和CSS合并成一个文件，这样浏览器就只需要一次请求。图片也可以合并，多张图片合并成一张。如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标点击操作，构造不同的URL。</p><h3 id="2-使用浏览器缓存"><a href="#2-使用浏览器缓存" class="headerlink" title="2. 使用浏览器缓存"></a>2. 使用浏览器缓存</h3><p>​    对一个网站而言，CSS、javascript、logo、图标这些静态资源文件更新的频率都比较低，而这些文件又几乎是每次http请求都需要的，如果将这些文件缓存在浏览器中，可以极好的改善性能。</p><p>​    可以使用localStorage来存储数据。</p><h3 id="3-CSS放在页面最上部，javascript放在页面最下面"><a href="#3-CSS放在页面最上部，javascript放在页面最下面" class="headerlink" title="3. CSS放在页面最上部，javascript放在页面最下面"></a>3. CSS放在页面最上部，javascript放在页面最下面</h3><p>​    浏览器会在下载完成全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。</p><p>​        Javascript则相反，浏览器在加载javascript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此javascript最好放在页面最下面。但如果页面解析时就需要用到javascript，这时放到底部就不合适了，不过这时候可以写入口函数，让这段js代码在程序运行最开始调用。</p><h3 id="3-避免页面跳转"><a href="#3-避免页面跳转" class="headerlink" title="3. 避免页面跳转"></a>3. 避免页面跳转</h3><p>​    可以使用ajax进行无刷新和后台交互，利用js来发送请求报文。阻止a标签默认事件。</p><h3 id="4-对图片进行优化"><a href="#4-对图片进行优化" class="headerlink" title="4. 对图片进行优化"></a>4. 对图片进行优化</h3><ul><li><p>图片懒加载</p></li><li><p>小图片可以做成精灵图，或字体图标</p></li><li><p>加载完成前先准备一张压缩的特别厉害的缩略图，提高用户体验</p></li><li><p>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性能优化总结&quot;&gt;&lt;a href=&quot;#性能优化总结&quot; class=&quot;headerlink&quot; title=&quot;性能优化总结&quot;&gt;&lt;/a&gt;性能优化总结&lt;/h2&gt;&lt;h3 id=&quot;1-减少http请求&quot;&gt;&lt;a href=&quot;#1-减少http请求&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>响应式viewport设计</title>
    <link href="http://yoursite.com/2018/01/14/viewport/"/>
    <id>http://yoursite.com/2018/01/14/viewport/</id>
    <published>2018-01-14T02:29:12.000Z</published>
    <updated>2018-03-12T06:57:51.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式viewport设计"><a href="#响应式viewport设计" class="headerlink" title="响应式viewport设计"></a>响应式viewport设计</h2><h3 id="什么是-Viewport"><a href="#什么是-Viewport" class="headerlink" title="什么是 Viewport?"></a>什么是 Viewport?</h3><p>viewport 是用户网页的可视区域。</p><ul><li>viewport 翻译为中文可以叫做”视区”。</li></ul><blockquote><p> 在移动设备里面， 屏幕可以把它相像成一个窗户。 网页是在窗户的后面一个叫做 视区（viewport）的区域显示的。 就相当于在窗记的后面有一块可以滑动的幕布。 一般情况下， viewport的宽度，会比手机的实际的宽度要大。</p></blockquote><pre><code>   viewport的背景： 在智能手机才出来的时候，所有的pc端的网页，要想在手机上完整显示， 必须只能左右滑动。 这样的话只能让手机的可视区。比手机屏幕的宽度要大。      就产生了一个问题： 在布局的时候，如果使用百分比布局，参考的屏幕的宽度可能是一个错误的值。    强制去设置视口的宽度和屏幕的宽度一致。    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></pre><h3 id="viewport的属性的介绍"><a href="#viewport的属性的介绍" class="headerlink" title="viewport的属性的介绍"></a>viewport的属性的介绍</h3><ul><li>height：和 width 相对应，指定高度。</li><li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。</li><li>maximum-scale：允许用户缩放到的最大比例。</li><li>minimum-scale：允许用户缩放到的最小比例。</li><li>user-scalable：用户是否可以手动缩放。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;响应式viewport设计&quot;&gt;&lt;a href=&quot;#响应式viewport设计&quot; class=&quot;headerlink&quot; title=&quot;响应式viewport设计&quot;&gt;&lt;/a&gt;响应式viewport设计&lt;/h2&gt;&lt;h3 id=&quot;什么是-Viewport&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="web移动端" scheme="http://yoursite.com/categories/web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="viewport设计" scheme="http://yoursite.com/tags/viewport%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS的本地保存用法总结</title>
    <link href="http://yoursite.com/2018/01/09/%E6%9C%AC%E5%9C%B0%E4%BF%9D%E5%AD%98%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/09/本地保存用法总结/</id>
    <published>2018-01-09T06:21:32.000Z</published>
    <updated>2018-03-12T06:37:02.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS的本地保存用法总结"><a href="#JS的本地保存用法总结" class="headerlink" title="JS的本地保存用法总结"></a>JS的本地保存用法总结</h2><h3 id="localStorage和sessionStorage的区别"><a href="#localStorage和sessionStorage的区别" class="headerlink" title="localStorage和sessionStorage的区别"></a>localStorage和sessionStorage的区别</h3><blockquote><p>JS中为了减少与服务器的通信，经常会用到保存的数据到本地的功能，例如本地用户信息保存。</p></blockquote><pre><code>1. localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。2. 他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。3. localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了4. 不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</code></pre><h3 id="localStorage、和sessionStorage的用法"><a href="#localStorage、和sessionStorage的用法" class="headerlink" title="localStorage、和sessionStorage的用法"></a>localStorage、和sessionStorage的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">localStorage和sessionStorage使用时使用相同的API：</span><br><span class="line"></span><br><span class="line">localStorage.setItem(&quot;key&quot;,&quot;value&quot;);//以“key”为名称存储一个值“value”</span><br><span class="line"></span><br><span class="line">localStorage.getItem(&quot;key&quot;);//获取名称为“key”的值</span><br><span class="line"></span><br><span class="line">列举localStorage的方法：</span><br><span class="line"></span><br><span class="line">for(var i=0;i&lt;localStorage.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">     var name = localStorage.key(i);</span><br><span class="line"></span><br><span class="line">     var value = localStorage.getItem(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除localStorage中存储信息的方法：</span><br><span class="line"></span><br><span class="line">localStorage.removeItem(&quot;key&quot;);//删除名称为“key”的信息。</span><br><span class="line"></span><br><span class="line">localStorage.clear();//清空localStorage中所有信息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS的本地保存用法总结&quot;&gt;&lt;a href=&quot;#JS的本地保存用法总结&quot; class=&quot;headerlink&quot; title=&quot;JS的本地保存用法总结&quot;&gt;&lt;/a&gt;JS的本地保存用法总结&lt;/h2&gt;&lt;h3 id=&quot;localStorage和sessionStorage的区
      
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="本地存储" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>border边框</title>
    <link href="http://yoursite.com/2017/11/16/border%E8%BE%B9%E6%A1%86/"/>
    <id>http://yoursite.com/2017/11/16/border边框/</id>
    <published>2017-11-16T09:07:05.000Z</published>
    <updated>2018-03-14T01:12:27.437Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hover-加边框"><a href="#hover-加边框" class="headerlink" title="hover 加边框"></a>hover 加边框</h3><blockquote><p>当给border加上鼠标移入加边框事件 hover 时，会发现边框会改变原本的盒子大小，但是这个时候加上box-sizing:border-box;也并没有效果。</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><pre><code>在原本的盒子模型中预先加上一个边框，并设置其颜色为透明即可，当做占位符。这样在后续给盒子添加鼠标移入加边框时就不会出现改变盒子模型的情况了border:1px solid transparent;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hover-加边框&quot;&gt;&lt;a href=&quot;#hover-加边框&quot; class=&quot;headerlink&quot; title=&quot;hover 加边框&quot;&gt;&lt;/a&gt;hover 加边框&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当给border加上鼠标移入加边框事件 hover 时，会
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="边框" scheme="http://yoursite.com/tags/%E8%BE%B9%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>会话技术</title>
    <link href="http://yoursite.com/2017/10/13/%E4%BC%9A%E8%AF%9D%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2017/10/13/会话状态/</id>
    <published>2017-10-13T06:46:12.000Z</published>
    <updated>2018-03-14T06:46:25.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie原理分析"><a href="#cookie原理分析" class="headerlink" title="cookie原理分析"></a>cookie原理分析</h3><ul><li>一个cookie的设置以及发送过程分为以下四步<ol><li>客户端发送一个http请求到服务器端 </li><li>服务器端发送一个http响应到客户端，其中包含Set-Cookie头部 </li><li>客户端发送一个http请求到服务器端，其中包含Cookie头部 </li><li>服务器端发送一个http响应到客户端 </li></ol></li></ul><h4 id="cookie常用属性"><a href="#cookie常用属性" class="headerlink" title="cookie常用属性"></a>cookie常用属性</h4><ul><li>expires 有效期 </li><li>path 路径 </li><li>domain 域名 </li></ul><h3 id="服务器操作cookie"><a href="#服务器操作cookie" class="headerlink" title="服务器操作cookie"></a>服务器操作cookie</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="comment">// setcookie(name, value, expire, path, domain);</span></span><br><span class="line"><span class="comment">// 设置1小时后过期</span></span><br><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">"lisi"</span>, time()+<span class="number">3600</span>);</span><br><span class="line"><span class="comment">// 获取单个cookie</span></span><br><span class="line"><span class="keyword">echo</span> $_COOKIE[<span class="string">"user"</span>];</span><br><span class="line"><span class="comment">// 查看所有cookie</span></span><br><span class="line">print_r($_COOKIE);</span><br></pre></td></tr></table></figure><h4 id="js对cookie基本操作"><a href="#js对cookie基本操作" class="headerlink" title="js对cookie基本操作"></a>js对cookie基本操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">key,value,param</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = key + <span class="string">'='</span> + value + <span class="string">'; expires='</span> + param.expires + <span class="string">'; path='</span> + param.path; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie;</span><br><span class="line">    <span class="keyword">var</span> arr = cookies.split(<span class="string">'; '</span>);</span><br><span class="line">    <span class="keyword">if</span>(arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> kv = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">            <span class="keyword">if</span>(kv[<span class="number">0</span>] == key)&#123;</span><br><span class="line">                <span class="keyword">return</span> kv[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jQuery插件操作cookie（jquery-cookie-js）"><a href="#jQuery插件操作cookie（jquery-cookie-js）" class="headerlink" title="jQuery插件操作cookie（jquery.cookie.js）"></a>jQuery插件操作cookie（jquery.cookie.js）</h4><ul><li>cookie插件基本使用<ul><li>设置单个cookie</li><li>获取单个cookie</li><li>获取所有cookie</li><li>删除单个cookie</li></ul></li><li>浏览器中cookie基本设置</li></ul><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="session原理分析"><a href="#session原理分析" class="headerlink" title="session原理分析"></a>session原理分析</h3><ul><li>客户端第一次请求服务器时，服务器开启一个session，生成一个唯一标识（sessionid：存储的数据与此sessionid关联），并以响应头的Set-Cookie属性响应到客户端</li><li>客户端的后续请求会一直通过请求头的Cookie属性携带sessionid（客户端与服务器通过此id维持状态）</li></ul><h3 id="session基本操作"><a href="#session基本操作" class="headerlink" title="session基本操作"></a>session基本操作</h3><ul><li><p>设置session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'user'</span>] = <span class="keyword">array</span>(<span class="string">'username'</span>=&gt;<span class="string">'lisi'</span>,<span class="string">'age'</span>=&gt;<span class="string">'12'</span>);</span><br></pre></td></tr></table></figure></li><li><p>读取session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$user = $_SESSION[<span class="string">'user'</span>];</span><br></pre></td></tr></table></figure></li><li><p>删除一个session信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'user'</span>]);</span><br></pre></td></tr></table></figure></li><li><p>删除所有session信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="keyword">unset</span>($_SESSION);</span><br></pre></td></tr></table></figure></li><li><p>销毁session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session_destroy();</span><br></pre></td></tr></table></figure></li></ul><h3 id="session与cookie的关系"><a href="#session与cookie的关系" class="headerlink" title="session与cookie的关系"></a>session与cookie的关系</h3><ul><li>session可以借助cookie实现状态维持，也可以不依赖cookie（URL重写）</li></ul><table><thead><tr><th>区别</th><th>cookie</th><th>session</th></tr></thead><tbody><tr><td>存储位置</td><td>浏览器</td><td>服务器</td></tr><tr><td>浏览器携带的数据量</td><td>多</td><td>少（只携带session-id）</td></tr><tr><td>存储的数据类型</td><td>只能是字符串</td><td>任意类型</td></tr><tr><td>安全性</td><td>较低</td><td>较高</td></tr><tr><td>默认的有效路径</td><td>当前路径及其子路径</td><td>整站有效</td></tr><tr><td>数据的传输量</td><td>有限制4K，不能超过20个</td><td>无限制</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cookie就是一种保存数据的技术，保存的位置是浏览器。</p><ol><li>只能够保存字符串。</li><li>不能保存复杂类型。</li><li>可以随意修改，因为我们能在浏览器看到cookie保存的内容。</li><li>一般是作为登录的判断</li><li>cookie的生命周期很短，默认是一次会话。关闭浏览器就会被销毁</li></ol><p>session就是一种保存数据的技术，保存的位置是服务器。</p><ol><li>可以保存复杂数据类型。</li><li>浏览器中看不到数据</li><li>生命周期长</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;会话技术&quot;&gt;&lt;a href=&quot;#会话技术&quot; class=&quot;headerlink&quot; title=&quot;会话技术&quot;&gt;&lt;/a&gt;会话技术&lt;/h2&gt;&lt;h2 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cooki
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="会话技术" scheme="http://yoursite.com/tags/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>PHP数据库简单操作</title>
    <link href="http://yoursite.com/2017/09/27/PHP%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2017/09/27/PHP数据库/</id>
    <published>2017-09-27T08:15:17.000Z</published>
    <updated>2018-03-12T09:00:24.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库操作方式"><a href="#数据库操作方式" class="headerlink" title="数据库操作方式"></a>数据库操作方式</h2><ul><li>图形界面客户端<ul><li>创建连接</li><li>创建数据库</li><li>删除数据库</li><li>创建表</li><li>编辑表</li><li>删除表</li><li>表结构分析</li><li>数据类型分析</li><li>数据增删改查操作</li></ul></li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li>SQL基本概述</li><li><p>插入数据insert</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- insert into 表名 (字段列表) values (值列表)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> book (<span class="keyword">name</span>,author,<span class="keyword">category</span>,price) <span class="keyword">values</span> (<span class="string">'天龙八部'</span>,<span class="string">'金庸'</span>,<span class="string">'文学'</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure></li><li><p>修改数据update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- update 表名 set 字段名称1=值1,字段名称2=值2,... where 条件</span></span><br><span class="line"><span class="keyword">update</span> book <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'笑傲江湖'</span>,price=<span class="string">'30'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- delete from 表名 where 条件</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> book <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>查询数据select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- select * from 表名 where 条件</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> book <span class="keyword">where</span> author=<span class="string">'金庸'</span> <span class="keyword">and</span> price&gt;<span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>简单的联表查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.username,b.name <span class="keyword">from</span> <span class="keyword">user</span> u,book b <span class="keyword">where</span> u.id=b.uid <span class="keyword">and</span> b.price&gt;<span class="number">20</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="PHP代码操作数据"><a href="#PHP代码操作数据" class="headerlink" title="PHP代码操作数据"></a>PHP代码操作数据</h2><ul><li><p>连接数据库基本步骤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、连接数据库</span></span><br><span class="line">$server = <span class="string">'localhost'</span>;<span class="comment">//数据库所在计算机的域名或者IP地址</span></span><br><span class="line">$username = <span class="string">'root'</span>;<span class="comment">//登录数据库的用户名</span></span><br><span class="line">$pw = <span class="string">''</span>;<span class="comment">//登录数据库的密码</span></span><br><span class="line"><span class="comment">// 执行连接操作</span></span><br><span class="line">$link = mysql_connect($server,$username,$pw);</span><br><span class="line"><span class="comment">// 2、选择要操作哪个数据库</span></span><br><span class="line">mysql_select_db(<span class="string">'hello'</span>,$link);</span><br><span class="line"><span class="comment">// 3、设置查询编码</span></span><br><span class="line">mysql_query(<span class="string">"SET names UTF8"</span>);</span><br><span class="line"><span class="comment">// 4、操作数据（通过sql语句操作数据库）</span></span><br><span class="line">$str = <span class="string">'select count(*) as cc from user'</span>;</span><br><span class="line">$result = mysql_query($str);</span><br><span class="line"><span class="comment">// 5、获取数据库的结果集并解析</span></span><br><span class="line">$row = mysql_fetch_assoc($result);</span><br><span class="line"><span class="keyword">echo</span> $row[<span class="string">'cc'</span>];</span><br><span class="line"><span class="comment">// 6、释放资源并关闭数据库</span></span><br><span class="line">mysql_free_result($result);</span><br><span class="line">mysql_close($link);</span><br></pre></td></tr></table></figure></li><li><p>数据库操作常用api</p><ul><li>mysql_connect() 连接数据库</li><li>mysql_select_db() 选择数据库</li><li>mysql_query() 执SQL语句</li><li>mysql_fetch_row() 以索引数组的形式返回结果</li><li>mysql_fetch_assoc() 以关联数组的形式范湖数据</li><li>mysql_fetch_array() 返回索引数组和关联数组</li><li>mysql_fetch_object() 以对象形式返回结果</li><li>mysql_free_result() 释放资源</li><li>mysql_close() 关闭连接</li></ul></li><li>基本增删改查操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库操作方式&quot;&gt;&lt;a href=&quot;#数据库操作方式&quot; class=&quot;headerlink&quot; title=&quot;数据库操作方式&quot;&gt;&lt;/a&gt;数据库操作方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;图形界面客户端&lt;ul&gt;
&lt;li&gt;创建连接&lt;/li&gt;
&lt;li&gt;创建数据库&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP-数据库" scheme="http://yoursite.com/tags/PHP-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>jQuery操作</title>
    <link href="http://yoursite.com/2017/09/21/jQuery_Class%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/09/21/jQuery_Class操作/</id>
    <published>2017-09-21T09:25:18.000Z</published>
    <updated>2018-03-10T09:03:07.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery操作"><a href="#jQuery操作" class="headerlink" title="jQuery操作"></a>jQuery操作</h2><h3 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h3><ul><li><p>功能：设置或者修改样式，操作的是style属性。</p></li><li><p>操作单个样式</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name：需要设置的样式名称</span></span><br><span class="line"><span class="comment">// value：对应的样式值</span></span><br><span class="line">$obj.css(name, value);</span><br><span class="line"><span class="comment">// 使用案例</span></span><br><span class="line">$(<span class="string">'#one'</span>).css(<span class="string">'background'</span>,<span class="string">'gray'</span>);<span class="comment">// 将背景色修改为灰色</span></span><br></pre></td></tr></table></figure><ul><li>设置多个样式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一个对象，对象中包含了需要设置的样式名和样式值</span></span><br><span class="line">$obj.css(obj);</span><br><span class="line"><span class="comment">// 使用案例</span></span><br><span class="line">$(<span class="string">'#one'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background'</span>:<span class="string">'gray'</span>,</span><br><span class="line">    <span class="string">'width'</span>:<span class="string">'400px'</span>,</span><br><span class="line">    <span class="string">'height'</span>:<span class="string">'200px'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>获取样式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name:需要获取的样式名称</span></span><br><span class="line">$obj.css(name);</span><br><span class="line"><span class="comment">// 案例</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background-color'</span>);</span><br></pre></td></tr></table></figure><p>注意：获取样式操作只会返回第一个元素对应的样式值。</p><p>隐式迭代：</p><ol><li>设置操作的时候，如果是多个元素，那么给所有的元素设置相同的值</li><li>获取操作的时候，如果是多个元素，那么只会返回第一个元素的值。</li></ol><h3 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h3><ul><li>添加样式类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name：需要添加的样式类名，注意参数不要带点.</span></span><br><span class="line">$obj.addClass(name);</span><br><span class="line"><span class="comment">// 例子,给所有的div添加one的样式。</span></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure><ul><li>移除样式类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name:需要移除的样式类名</span></span><br><span class="line">$obj.removeClass(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// 例子，移除div中one的样式类名</span></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure><ul><li>判断是否有某个样式类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name:用于判断的样式类名，返回值为true false</span></span><br><span class="line">$obj.hasClass(name)</span><br><span class="line"><span class="comment">// 例子，判断第一个div是否有one的样式类</span></span><br><span class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure><ul><li>切换样式类</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name:需要切换的样式类名，如果有，移除该样式，如果没有，添加该样式。</span></span><br><span class="line">$obj.toggleClass(name);</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure><h2 id="jQuery节点操作"><a href="#jQuery节点操作" class="headerlink" title="jQuery节点操作"></a>jQuery节点操作</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $(htmlStr)</span></span><br><span class="line"><span class="comment">// htmlStr：html格式的字符串</span></span><br><span class="line">$(<span class="string">'&lt;span-这是一个span元素&lt;/span-'</span>);</span><br></pre></td></tr></table></figure><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append  appendTo在被选元素的结尾插入内容</span><br><span class="line">prepend prependTo在被选元素的开头插入内容</span><br><span class="line">before在被选元素之后插入内容</span><br><span class="line">after在被选元素之前插入内容</span><br></pre></td></tr></table></figure><h3 id="清空节点与删除节点"><a href="#清空节点与删除节点" class="headerlink" title="清空节点与删除节点"></a>清空节点与删除节点</h3><ul><li>empty：清空指定节点的所有元素，自身保留(清理门户)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).empty(); <span class="comment">// 清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）</span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">''</span>);<span class="comment">// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</span></span><br></pre></td></tr></table></figure><ul><li>remove：相比于empty，自身也删除（自杀）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).remove();</span><br></pre></td></tr></table></figure><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><ul><li>作用：复制匹配的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制$(selector)所匹配到的元素（深度复制）</span></span><br><span class="line"><span class="comment">// cloneNode(true)</span></span><br><span class="line"><span class="comment">// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。</span></span><br><span class="line">$(selector).clone();</span><br></pre></td></tr></table></figure><h2 id="jQuery操作属性"><a href="#jQuery操作属性" class="headerlink" title="jQuery操作属性"></a>jQuery操作属性</h2><h3 id="attr操作"><a href="#attr操作" class="headerlink" title="attr操作"></a>attr操作</h3><ul><li>设置单个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：需要设置的属性名</span></span><br><span class="line"><span class="comment">// 第二个参数：对应的属性值</span></span><br><span class="line">$obj.attr(name, value);</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'title'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'alt'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br></pre></td></tr></table></figure><ul><li>设置多个属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一个对象，包含了需要设置的属性名和属性值</span></span><br><span class="line">$obj.attr(obj)</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).attr(&#123;</span><br><span class="line">    title:<span class="string">'哎哟，不错哦'</span>,</span><br><span class="line">    alt:<span class="string">'哎哟，不错哦'</span>,</span><br><span class="line">    style:<span class="string">'opacity:.5'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>获取属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传需要获取的属性名称，返回对应的属性值</span></span><br><span class="line">$obj.attr(name)</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line"><span class="keyword">var</span> oTitle = $(<span class="string">'img'</span>).attr(<span class="string">'title'</span>);</span><br><span class="line">alert(oTitle);</span><br></pre></td></tr></table></figure><ul><li>移除属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数：需要移除的属性名，</span></span><br><span class="line">$obj.removeAttr(name);</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).removeAttr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><h3 id="prop操作"><a href="#prop操作" class="headerlink" title="prop操作"></a>prop操作</h3><ul><li>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>);<span class="comment">// 返回true或者false</span></span><br></pre></td></tr></table></figure><h3 id="val-text-html"><a href="#val-text-html" class="headerlink" title="val()/text/()html()"></a>val()/text/()html()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$obj.val()获取或者设置表单元素的value属性的值</span><br><span class="line">$obj.html() 对应innerHTML</span><br><span class="line">$obj.text()对应innerText/textContent，处理了浏览器的兼容性</span><br></pre></td></tr></table></figure><h2 id="jQuery尺寸和位置操作"><a href="#jQuery尺寸和位置操作" class="headerlink" title="jQuery尺寸和位置操作"></a>jQuery尺寸和位置操作</h2><h3 id="width方法与height方法"><a href="#width方法与height方法" class="headerlink" title="width方法与height方法"></a>width方法与height方法</h3><ul><li>设置或者获取高度，不包括内边距、边框和外边距</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数表示设置高度</span></span><br><span class="line">$(<span class="string">'img'</span>).height(<span class="number">200</span>);</span><br><span class="line"><span class="comment">// 不带参数获取高度</span></span><br><span class="line">$(<span class="string">'img'</span>).height();</span><br></pre></td></tr></table></figure><p>获取网页的可视区宽高</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取可视区宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="comment">// 获取可视区高度</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure><h3 id="innerWidth-innerHeight-outerWidth-outerHeight"><a href="#innerWidth-innerHeight-outerWidth-outerHeight" class="headerlink" title="innerWidth/innerHeight/outerWidth/outerHeight"></a>innerWidth/innerHeight/outerWidth/outerHeight</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innerWidth()/innerHeight()方法返回元素的宽度/高度（包括内边距）。</span><br><span class="line">outerWidth()/outerHeight()  方法返回元素的宽度/高度（包括内边距和边框）。</span><br><span class="line">outerWidth(<span class="literal">true</span>)/outerHeight(<span class="literal">true</span>)  方法返回元素的宽度/高度（包括内边距、边框和外边距）。</span><br></pre></td></tr></table></figure><h3 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h3><ul><li>设置或者获取垂直滚动条的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">// 获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure><h3 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h3><ul><li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(offsetParent)的位置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">// 获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery操作&quot;&gt;&lt;a href=&quot;#jQuery操作&quot; class=&quot;headerlink&quot; title=&quot;jQuery操作&quot;&gt;&lt;/a&gt;jQuery操作&lt;/h2&gt;&lt;h3 id=&quot;CSS操作&quot;&gt;&lt;a href=&quot;#CSS操作&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery操作元素" scheme="http://yoursite.com/tags/jQuery%E6%93%8D%E4%BD%9C%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>源代码管理工具git</title>
    <link href="http://yoursite.com/2017/08/17/%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/08/17/源代码管理工具/</id>
    <published>2017-08-17T05:05:45.000Z</published>
    <updated>2018-03-16T05:08:00.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是源代码管理工具"><a href="#什么是源代码管理工具" class="headerlink" title="什么是源代码管理工具"></a>什么是源代码管理工具</h2><pre><code>1. 早期源代码通过拷贝粘贴来管理    1. 不方便相互之间获取别人写的代码    2. 两个或者多个人同时修改了一个文件 是否替换 代码会冲突    3. 最终如何解决 ，需要严格约束写代码人员不要同时改一个文件 （如果同一个文件有新增的代码 让项目项目经理负责修改 ） 项目整合也是靠项目整合2. 为了解决源代码管理的问题 就出现了源代码管理工具    1. 方便快捷的获取到别人写的代码       2. 如何解决冲突的问题 使用工具提交 如果有冲突 会同时保留两个人写的代码</code></pre><h2 id="git和svn的区别"><a href="#git和svn的区别" class="headerlink" title="git和svn的区别"></a>git和svn的区别</h2><p>1．SVN优缺点<br>优点：<br>1、 管理方便，逻辑明确，符合一般人思维习惯。<br>2、 易于管理，集中式服务器更能保证安全性。<br>3、 代码一致性非常高。<br>4、 适合开发人数不多的项目开发。<br>缺点：<br>1、 服务器压力太大，数据库容量暴增。<br>2、 如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。<br>3、 不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</p><p>2．Git优缺点<br>优点：<br>1、适合分布式开发，强调个体。<br>2、公共服务器压力和数据量都不会太大。<br>3、速度快、灵活。<br>4、任意两个开发者之间可以很容易的解决冲突。<br>5、离线工作。<br>缺点：<br>1、学习周期相对而言比较长。<br>2、不符合常规思维。<br>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</p><blockquote><p>svn比较适合后台项目 代码是私有的</p><p>git比较适合前端项目 代码的公开的</p></blockquote><h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><h3 id="1-什么是GIT"><a href="#1-什么是GIT" class="headerlink" title="1. 什么是GIT"></a>1. 什么是GIT</h3><ul><li>是一个源代码管理工具</li><li>GIT是Linux之父当年为了维护管理Linux的源代码写的一个工具</li><li>Git 之前 很多使用 svn vss tfs hs ……</li></ul><ul><li><a href="https://guides.github.com/" target="_blank" rel="noopener">https://guides.github.com/</a></li><li>github是一个git仓库的托管平台 代码库的平台</li></ul><h3 id="2-安装GIT"><a href="#2-安装GIT" class="headerlink" title="2. 安装GIT"></a>2. 安装GIT</h3><ul><li>git命令行工具</li><li>基于git命令行的一个客户端软件（提供一个界面去管理源代码）</li></ul><h3 id="3-GIT命令操作"><a href="#3-GIT命令操作" class="headerlink" title="3. GIT命令操作"></a>3. GIT命令操作</h3><ul><li>初始化一个本地GIT仓储</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 当前项目目录</span><br><span class="line">git init // 初始化一个本地的仓库</span><br></pre></td></tr></table></figure><blockquote><p>就是在本地文件夹中添加了一个.git的文件夹用于记录所有的项目变更信息</p></blockquote><ul><li>查看本地仓储的变更状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">用于查看本地仓储的状态</span><br><span class="line">第一次查看，显示的是一坨没有被跟踪的文件</span><br><span class="line">git status -s // -s 是输出简要的变更日志</span><br></pre></td></tr></table></figure><ul><li>添加本地暂存（托管）文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">可以将一个没有被跟踪的文件添加到跟踪列表</span><br><span class="line">类似于node_modules这种性质的文件是不应该被跟踪</span><br></pre></td></tr></table></figure><ul><li>添加本地GIT忽略清单文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在代码库文件夹的根目录添加一个.gitignore文件</span><br><span class="line">此文件用于说明忽略的文件有哪些</span><br></pre></td></tr></table></figure><ul><li>提交被托管的文件变化到本地仓储</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line">将本地的变化提交的本地的仓库文件夹归档</span><br><span class="line">一般在有了一个小单元的整体变化后再提交</span><br></pre></td></tr></table></figure><ul><li>对比差异</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config</span><br><span class="line"></span><br><span class="line">- 用于配置git的配置 入邮箱用户名等</span><br><span class="line"></span><br><span class="line">git diff</span><br><span class="line">可以用于对比当前状态和版本库中状态的变化</span><br></pre></td></tr></table></figure><ul><li>提交日志</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log   </span><br><span class="line">git log --oneline 查看简要日志</span><br><span class="line">可以查看提交日志</span><br></pre></td></tr></table></figure><ul><li>回归到指定版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure><ul><li><p>为仓储添加远端（服务器端）地址</p></li><li><p>将本地仓储的提交记录推送到远端的master分支</p></li><li><p>拉取远端master分支的更新记录到本地</p></li><li><p>回归到指定版本</p></li></ul><h1 id="git-进阶"><a href="#git-进阶" class="headerlink" title="git 进阶"></a>git 进阶</h1><h2 id="1-分支"><a href="#1-分支" class="headerlink" title="1. 分支"></a>1. 分支</h2><ul><li>查看分支：git branch，当前分支会标有一个*</li><li>创建分支：git branch [分支名称]<ul><li>分支中的代码，与创建那一刻主分支中的内容完全相同</li></ul></li><li>切换分支：git checkout [分支名称]</li><li>(简写)创建并切换分支：git checkout -b [分支名称]</li><li>合并分支：git merge [分支名称]，即：将其他分支合并到当前分支</li><li>删除分支：git branch -d [分支名称]</li></ul><h3 id="合并分支冲突"><a href="#合并分支冲突" class="headerlink" title="合并分支冲突"></a>合并分支冲突</h3><ul><li>注意：合并分支时出现冲突只能手动处理文件，然后，再次提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果在一个从分支中做了修改，然后，在主分支中也做了修改。</span><br><span class="line">此时，将这个从分支合并到主分支的时候，就会出现合并冲突的问题！</span><br></pre></td></tr></table></figure></li></ul><h3 id="分支的说明"><a href="#分支的说明" class="headerlink" title="分支的说明"></a>分支的说明</h3><ul><li>1 公司开发的项目都是由多个分支组成：主分支 + dev分支</li><li>2 项目经理新建项目仓库，所有的程序员都从这个仓库中获取代码，完成开发任务</li><li>3 项目经理：搭建设计仓库，创建master分支，以及dev分支（以及 debug分支等）</li><li>4 所有的程序员在 dev分支 上进行开发，并且还有自己维护的分支</li><li>5 程序员在分支上完成开发任务后，会提交合并请求</li><li>6 项目经理安排测试，如果没有问题了，最后才会与 master 分支合并</li></ul><h2 id="2-github基本使用"><a href="#2-github基本使用" class="headerlink" title="2. github基本使用"></a>2. github基本使用</h2><ul><li><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li><li>github是一个GIT服务的提供商，</li><li>提出社交化编程</li></ul><p><a href="http://zoomzhao.github.io/code-guide/" target="_blank" rel="noopener">http://zoomzhao.github.io/code-guide/</a><br><a href="https://github.com/jobbole/awesome-javascript-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-javascript-cn</a><br><a href="https://github.com/jobbole/awesome-css-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-css-cn</a></p><ul><li>开源中国-Git<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在 GitHub 上免费托管的 Git 仓库，</span><br><span class="line">任何人都可以看到喔（但只有你自己才能改）。</span><br><span class="line">所以，不要把敏感信息放进去。</span><br></pre></td></tr></table></figure></li></ul><h3 id="github与git的关系"><a href="#github与git的关系" class="headerlink" title="github与git的关系"></a>github与git的关系</h3><ul><li>1 git 是一个版本控制工具</li><li>2 github就是一个网站，这个网站提供了 git 服务器的功能</li></ul><h3 id="将代码提交到远程仓库（HTTPS）"><a href="#将代码提交到远程仓库（HTTPS）" class="headerlink" title="将代码提交到远程仓库（HTTPS）"></a>将代码提交到远程仓库（HTTPS）</h3><ul><li>1 在本地创建仓库<ul><li>git init</li><li>git config</li></ul></li><li>2 新建 README.md 文件，并输入任意内容</li><li>3 将 README.md 提交到本地<ul><li>git add</li><li>git commit</li></ul></li><li>4 在github中新建仓库，并拿到仓库地址</li><li>5 使用命令 git push [仓库地址] master 提交内容到github的默认分支</li><li>6 刷新github仓库页面，在线修改 README.md 文件，并提交</li><li>7 使用命令 git pull [仓库地址] master 获取仓库中的最新内容</li></ul><h3 id="获取远程仓库内容"><a href="#获取远程仓库内容" class="headerlink" title="获取远程仓库内容"></a>获取远程仓库内容</h3><ul><li>命令：git pull [仓库地址] [分支名称] 获取远程仓库最新内容</li><li>命令：git clone [仓库地址] [自定义本地仓库名] 将整个仓库克隆到本地<ul><li>实例：git clone git://github.com/jquery/jquery.git myJQ</li></ul></li></ul><h3 id="简化操作"><a href="#简化操作" class="headerlink" title="简化操作"></a>简化操作</h3><ul><li>1 git remote add origin [仓库地址]<ul><li>作用：使用origin代替 仓库地址 ，方便操作</li></ul></li><li>2 git push -u origin master<ul><li>作用：-u参数将origin与master连在一起</li></ul></li><li>3 使用简化命令 git push origin 就代替原来：”git remote add origin [仓库地址]”</li></ul><h3 id="SSH介绍"><a href="#SSH介绍" class="headerlink" title="SSH介绍"></a>SSH介绍</h3><ul><li>非对称加密、公钥和私钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，</span><br><span class="line">而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，</span><br><span class="line">就可以确认只有你自己才能推送，从而省去每次输入密码的操作。</span><br><span class="line"></span><br><span class="line">可以同时设置多个SSH key，比如：你可以在公司电脑提交需要一个key，</span><br><span class="line">回家后自己的电脑提交也需要一个key</span><br><span class="line"></span><br><span class="line">ssh是一种安全的传输模式</span><br><span class="line">github要求推送代码的用户是合法的，所以每次推送时候都要输入账号密码，</span><br><span class="line">用以验证你是否为合法用户，为了省去每次都要输入密码的步骤，采用shh公钥，密钥</span><br><span class="line">也就是你说的sshkey来验证你是否为合法用户</span><br><span class="line">在你的电脑生成了一个唯一的ssh公钥和私钥，公钥放到github上面，当你推送的时候，git就会</span><br><span class="line">匹配你的私钥是否跟github上面的公钥是配对的，正确就认为你是合法的，允许推送。</span><br><span class="line"></span><br><span class="line">sshkey可以理解为是你的身份标识，放在github上面表明你是这个项目的一个开发人员，但是别</span><br><span class="line">人是可以截获的，你本机的私钥别人就无法截获，sshkey就可以保证每次传输都是安全的。</span><br></pre></td></tr></table></figure></li></ul><h3 id="将代码提交到远程仓库（SSH）"><a href="#将代码提交到远程仓库（SSH）" class="headerlink" title="将代码提交到远程仓库（SSH）"></a>将代码提交到远程仓库（SSH）</h3><ul><li>创建SSH Key：ssh-keygen -t rsa</li><li>在文件路径 C:\用户\当前用户名\ 找到 .ssh 文件夹</li><li>文件夹中有两个文件：<ul><li>私钥：id_rsa</li><li>公钥：id_rsa.pub</li></ul></li><li>在 github -&gt; settings -&gt; SSH and GPG keys页面中，新创建SSH key</li><li>粘贴 公钥 id_rsa.pub 内容到对应文本框中</li><li>在github中新建仓库或者使用现在仓库，拿到<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:用户名/仓库名.git</li><li>此后，再次SSH方式与github“通信”，不用输入密码确认身份了</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>先获取再提交，即：先pull再push</li><li>pull和fetch的区别</li></ul><h2 id="github搭建博客"><a href="#github搭建博客" class="headerlink" title="github搭建博客"></a>github搭建博客</h2><ul><li>使用github服务器的 gh-pages 分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 在本地工作目录使用git初始化 `git init`</span><br><span class="line">2 创建自己的博客项目</span><br><span class="line">3 将创建好的博客添加到暂存区 `git add [文件路径]`</span><br><span class="line">4 本地提交： `git commit -m &quot;第一个博客&quot;`</span><br><span class="line">5 创建分支：`git branch gh-pages` 分支名称固定！</span><br><span class="line">6 切换分支：`git checkout gh-pages`</span><br><span class="line">7 提交到github：`git push [github仓库地址] gh-pages`</span><br><span class="line">8 查看github中对应的仓库中，是不是提交到了 &quot;gh-pages&quot; 分支</span><br><span class="line">9 访问：&lt;github用户名&gt;.github.io/&lt;仓库名&gt;/&lt;文件名&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是源代码管理工具&quot;&gt;&lt;a href=&quot;#什么是源代码管理工具&quot; class=&quot;headerlink&quot; title=&quot;什么是源代码管理工具&quot;&gt;&lt;/a&gt;什么是源代码管理工具&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 早期源代码通过拷贝粘贴来管理
    1. 不方便相互
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>相对长度单位</title>
    <link href="http://yoursite.com/2017/07/03/%E7%9B%B8%E5%AF%B9%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D/"/>
    <id>http://yoursite.com/2017/07/03/相对长度单位/</id>
    <published>2017-07-03T11:01:41.000Z</published>
    <updated>2018-03-13T11:32:59.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h1><blockquote><p>在移动开发过程中，因为手机的屏幕尺寸比较多， 如果使用绝对长度单位， 那么在不同的手机尺寸下面，显示的比例可能不一样。</p></blockquote><h2 id="相对长度单位说明"><a href="#相对长度单位说明" class="headerlink" title="相对长度单位说明"></a>相对长度单位说明</h2><ul><li>在css中有两个相对长度单位， em， rem。 我们可以把它理解成屏幕宽度的 一份。 </li><li>1份默认的宽度是16px，也就是浏览器器的默认显示字体， 如果说直接使用16px. 是不行的， 假如说，在ipone7上和iphone7plus上，有一个元素，都占了五份。 相当于两个屏幕上都创建一个 5*16px的宽度的元素。所以，我们要根据不同的手机宽度，来设置每一份到底点多大的宽度。 </li></ul><h2 id="设置相对长度单位，也就是一份的大小"><a href="#设置相对长度单位，也就是一份的大小" class="headerlink" title="设置相对长度单位，也就是一份的大小"></a>设置相对长度单位，也就是一份的大小</h2><ul><li>先把屏幕的宽度拿到，分成10份， 把每一份的宽度设为 html 的 font-size 的大小，那么 1份=html.fontsize = 1em, 1rem<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //把屏幕分成10份</span><br><span class="line">    var screenw = window.screen.width;</span><br><span class="line">    document.querySelector(&quot;html&quot;).style.fontSize = screenw / 10 + &quot;px&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这段js代码要写在最上面</p></blockquote><h2 id="到底是使用rem还是em？"><a href="#到底是使用rem还是em？" class="headerlink" title="到底是使用rem还是em？"></a>到底是使用rem还是em？</h2><ul><li>rem永远是html的font-size的大小作为一份的大小；em是以父元素的font-size的大小作为一份的大小。 我们那建议为了减少计算量，直接使用 rem</li><li>rem和em都是相对长度单位<ul><li>rem是相对于根元素的font-size来算出每一份的宽度</li><li>em是相对于父元素的font-size的大小算出每一份的宽度</li></ul></li></ul><h2 id="如何使用rem"><a href="#如何使用rem" class="headerlink" title="如何使用rem"></a>如何使用rem</h2><ol><li>设计人员会给我们一种尺寸的设计图</li><li>它是用 px 来标记的</li><li>一般给的是高清图（以设备的分辨率作为宽高，而不是以css宽度），我们需要把它转成 css 宽度 （640 / 2 = 320）<ul><li>除了二倍图之外，也可能给3倍图， 如果3倍图，就要除以3</li></ul></li><li>算出每个 px 在设计人员给的这个屏幕尺寸下的 rem的值。转rem的规则都是一样的<ol><li>算出在当前屏幕尺寸下的 1rem值是多少。 320 / 10 = 32px</li><li>假如说，它标记了某个字体是 24px 对应我们在开发中要用的 那个值是 rem = 24px/32px</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相对长度单位&quot;&gt;&lt;a href=&quot;#相对长度单位&quot; class=&quot;headerlink&quot; title=&quot;相对长度单位&quot;&gt;&lt;/a&gt;相对长度单位&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在移动开发过程中，因为手机的屏幕尺寸比较多， 如果使用绝对长度单位， 那么在不同的
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>jQuery选择器</title>
    <link href="http://yoursite.com/2017/06/21/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/06/21/jQuery选择器/</id>
    <published>2017-06-21T12:23:22.000Z</published>
    <updated>2018-03-12T03:01:54.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。（查看jQuery文档）</p><p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><h3 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(‘#id’);</td><td style="text-align:left">获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(‘.class’);</td><td style="text-align:left">获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(‘div’);</td><td style="text-align:left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(‘div,p,li’);</td><td style="text-align:left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(‘div.redClass’);</td><td style="text-align:left">获取class为redClass的div元素</td></tr></tbody></table><ul><li>总结：跟css的选择器用法一模一样。</li></ul><h3 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(‘ul &gt; li’);</td><td style="text-align:left">使用-号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(‘ul li’);</td><td style="text-align:left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><ul><li>跟CSS的选择器一模一样。</li></ul><h3 id="jQuery过滤选择器"><a href="#jQuery过滤选择器" class="headerlink" title="jQuery过滤选择器"></a>jQuery过滤选择器</h3><ul><li>这类选择器都带冒号:</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(‘li:eq(2)’).css(‘color’, ‘red’);</td><td style="text-align:left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(‘li:odd’).css(‘color’, ‘red’);</td><td style="text-align:left">获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(‘li:even’).css(‘color’, ‘red’);</td><td style="text-align:left">获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><h3 id="jQuery筛选选择器-方法"><a href="#jQuery筛选选择器-方法" class="headerlink" title="jQuery筛选选择器(方法)"></a>jQuery筛选选择器(方法)</h3><ul><li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</li></ul><table><thead><tr><th>名称</th><th>用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(‘ul’).children(‘li’)</td><td style="text-align:left">相当于$(‘ul-li’)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(‘ul’).find(‘li’);</td><td style="text-align:left">相当于$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(‘#first’).siblings(‘li’);</td><td style="text-align:left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(‘#first’).parent();</td><td style="text-align:left">查找父亲</td></tr><tr><td>eq(index)</td><td>$(‘li’).eq(2);</td><td style="text-align:left">相当于$(‘li:eq(2)’),index从0开始</td></tr><tr><td>next()</td><td>$(‘li’).next()</td><td style="text-align:left">找下一个兄弟</td></tr><tr><td>prev()</td><td>$(‘li’).prev()</td><td style="text-align:left">找上一次兄弟</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;p&gt;jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuer
      
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery选择器" scheme="http://yoursite.com/tags/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>js贪吃蛇</title>
    <link href="http://yoursite.com/2017/05/28/%E7%AE%80%E6%98%93%E8%B4%AA%E5%90%83%E8%9B%87/"/>
    <id>http://yoursite.com/2017/05/28/简易贪吃蛇/</id>
    <published>2017-05-28T04:54:05.000Z</published>
    <updated>2018-03-08T03:47:56.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简易贪吃蛇"><a href="#简易贪吃蛇" class="headerlink" title="简易贪吃蛇"></a>简易贪吃蛇</h2><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><ul><li><blockquote><p>原理：我只要找一个对象，当我调用它开始游戏的方法，那么游戏就开始了。但是现在没有这样的对象，所以我们要封装这个对象，相当于是一个游戏管家。</p></blockquote></li></ul><h3 id="确定开发步骤"><a href="#确定开发步骤" class="headerlink" title="确定开发步骤"></a>确定开发步骤</h3><ol><li>写一个div到body里，当地图，设置样式宽和高、背景颜色、相对定位</li><li>创建食物</li><li>创建蛇</li><li>把食物和蛇单独封装到各自的一个文件</li><li>创建一个游戏管家类</li><li>用户按上下左右让蛇跟着动</li><li>判断越界</li><li>判断吃食物</li></ol><h3 id="创建地图模板"><a href="#创建地图模板" class="headerlink" title="创建地图模板"></a>创建地图模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #map &#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color: #cccccc;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;food.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;snake.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;Game.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">//找到地图</span><br><span class="line">var map = document.getElementById(&quot;map&quot;);</span><br><span class="line"></span><br><span class="line">//实例化游戏管家对象</span><br><span class="line">var gm = new Game();</span><br><span class="line"></span><br><span class="line">gm.startGame(map);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="创建食物"><a href="#创建食物" class="headerlink" title="创建食物"></a>创建食物</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function Food(x, y, w, h, color) &#123;</span><br><span class="line"></span><br><span class="line">    this.x = x || 0;</span><br><span class="line">    this.y = y || 0;</span><br><span class="line">    this.width = w || 20;</span><br><span class="line">    this.height = h || 20;</span><br><span class="line">    this.color = color || &quot;green&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var lastFood;</span><br><span class="line"></span><br><span class="line">//把食物渲染出来</span><br><span class="line">Food.prototype.render = function (map) &#123;</span><br><span class="line"></span><br><span class="line">if (lastFood) &#123;</span><br><span class="line"></span><br><span class="line">    //先把上一次的食物清掉</span><br><span class="line">    map.removeChild(lastFood);</span><br><span class="line">&#125;</span><br><span class="line">    //用地图的宽除以食物的宽得到最大可以放多少列</span><br><span class="line">    var col = map.offsetWidth / this.width;</span><br><span class="line">    this.x = Math.floor((Math.random() * col)) * this.width;</span><br><span class="line">    var row = map.offsetHeight / this.height;</span><br><span class="line">    this.y = Math.floor(Math.random() * row) * this.height;</span><br><span class="line">    </span><br><span class="line">    //创建div</span><br><span class="line">    var div = document.createElement(&quot;div&quot;);</span><br><span class="line">    div.style.position = &quot;absolute&quot;;</span><br><span class="line">    div.style.left = this.x + &quot;px&quot;;</span><br><span class="line">    div.style.top = this.y + &quot;px&quot;;</span><br><span class="line">    div.style.width = this.width + &quot;px&quot;;</span><br><span class="line">    div.style.height = this.height + &quot;px&quot;;</span><br><span class="line">    div.style.backgroundColor = this.color;</span><br><span class="line">    </span><br><span class="line">    lastFood = div;</span><br><span class="line">    </span><br><span class="line">    map.appendChild(div);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h3><pre><code>//保存上一次渲染生成的divvar list = [];//因为蛇是对象，所以给它一个构造函数function Snake(bodyW, bodyH, direction) {    //宽和高，只要用一个属性保存    this.bodyW = bodyW || 20;    this.bodyH = bodyH || 20;    //这里可以设置蛇默认的方向    this.direction = direction || &quot;right&quot;;    //蛇有身体，身体由数组组成（因为默认有3节身体，后面吃了食物还要能长身体（相当于给数组加一个元素））    this.body = [        {x: 3, y: 1, color: &quot;red&quot;},        {x: 2, y: 1, color: &quot;seagreen&quot;},        {x: 1, y: 1, color: &quot;seagreen&quot;},    ];}Snake.prototype.render = function (map) {    //先删除上一次渲染出来的div    for (var i = 0; i &lt; list.length; i++) {        map.removeChild(list[i]);    }    //内存中也要把这些div清楚掉    list = [];    //body里有多少个元素，就创建多少个div    for (var i = 0; i &lt; this.body.length; i++) {        var div = document.createElement(&quot;div&quot;);        div.style.position = &quot;absolute&quot;;        div.style.left = this.body[i].x * this.bodyW + &quot;px&quot;;        div.style.top = this.body[i].y * this.bodyH + &quot;px&quot;;        div.style.width = this.bodyW + &quot;px&quot;;        div.style.height = this.bodyH + &quot;px&quot;;        div.style.backgroundColor = this.body[i].color;        //把每次创建的div保存起来        list.push(div);        map.appendChild(div);    }}//移动是蛇的行为，所以给蛇对象加一个移动的方法Snake.prototype.move = function () {    //蛇身体移动，它前一个位置是多少，它就移动到多少    //从后到前遍历会更好，因为这样的话前一个身体还没动过位置可以拿到这个位置    //注意：不要包括0，因为0是蛇头，而蛇头没有前一个身体，是要单独根据方向来定    for (var i = this.body.length - 1; i &gt; 0; i--) {        this.body[i].x = this.body[i - 1].x;        this.body[i].y = this.body[i - 1].y;    }    //蛇头移动根据方向来    switch (this.direction) {        case &quot;up&quot;:            this.body[0].y--;            break;        case &quot;down&quot;:            this.body[0].y++;            break;        case &quot;left&quot;:            this.body[0].x--;            break;        case &quot;right&quot;:            this.body[0].x++;            break;    }}</code></pre><h3 id="创建一个游戏管家类"><a href="#创建一个游戏管家类" class="headerlink" title="创建一个游戏管家类"></a>创建一个游戏管家类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">var that;</span><br><span class="line">function Game() &#123;</span><br><span class="line"></span><br><span class="line">    //把游戏管理者对象保存起来，保存在that</span><br><span class="line">    that = this;</span><br><span class="line"></span><br><span class="line">    //管理蛇对象</span><br><span class="line">    this.snake = new Snake();</span><br><span class="line"></span><br><span class="line">    //管理食物对象</span><br><span class="line">    this.food = new Food();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bindKey() &#123;</span><br><span class="line"></span><br><span class="line">    //document.onkeypress;//不包括功能键</span><br><span class="line"></span><br><span class="line">    document.onkeydown = function (e) &#123;</span><br><span class="line"></span><br><span class="line">        e = e || window.event;</span><br><span class="line"></span><br><span class="line">        var code = e.keyCode || e.charCode || e.which;</span><br><span class="line">        //37左 38上 39右 40下</span><br><span class="line"></span><br><span class="line">        switch (code) &#123;</span><br><span class="line"></span><br><span class="line">            case 37:</span><br><span class="line">                if (that.snake.direction != &quot;right&quot;)</span><br><span class="line">                    that.snake.direction = &quot;left&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 38:</span><br><span class="line">                if (that.snake.direction != &quot;down&quot;)</span><br><span class="line">                    that.snake.direction = &quot;up&quot;;</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            case 39:</span><br><span class="line">                if (that.snake.direction != &quot;left&quot;)</span><br><span class="line">                    that.snake.direction = &quot;right&quot;;</span><br><span class="line">                break;</span><br><span class="line"></span><br><span class="line">            case 40:</span><br><span class="line">                if (that.snake.direction != &quot;up&quot;)</span><br><span class="line">                    that.snake.direction = &quot;down&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//开始游戏</span><br><span class="line">Game.prototype.startGame = function (map) &#123;</span><br><span class="line"></span><br><span class="line">    //开始游戏时就需要监听网页用户按下的键</span><br><span class="line">    bindKey();</span><br><span class="line"></span><br><span class="line">    //要把食物画出来</span><br><span class="line">    this.food.render(map);</span><br><span class="line"></span><br><span class="line">    //把蛇画出来</span><br><span class="line">    this.snake.render(map);</span><br><span class="line"></span><br><span class="line">    //蛇自己自动</span><br><span class="line">    autoMove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function autoMove() &#123;</span><br><span class="line"></span><br><span class="line">    var timerID = setInterval(function () &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //保存移动之前最后一格的身体坐标（为了如果移动后吃到食物了，这个坐标就给新添加的身体）</span><br><span class="line">        var oldX = that.snake.body[that.snake.body.length - 1].x;</span><br><span class="line">        var oldY = that.snake.body[that.snake.body.length - 1].y;</span><br><span class="line"></span><br><span class="line">        //让蛇自己动</span><br><span class="line">        that.snake.move();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //判断是否越界</span><br><span class="line">        //如果水平方向一行只能放20个，意味着蛇头的x如果大于等于20就越界</span><br><span class="line">        var maxCol = map.offsetWidth / that.snake.bodyW;</span><br><span class="line">        var maxRow = map.offsetHeight / that.snake.bodyH;</span><br><span class="line">        var head = that.snake.body[0];</span><br><span class="line">        if (head.x &gt;= maxCol || head.x &lt; 0 || head.y &lt; 0 || head.y &gt;= maxRow) &#123;</span><br><span class="line"></span><br><span class="line">            alert(&quot;Game Over!&quot;);</span><br><span class="line"></span><br><span class="line">            clearInterval(timerID);</span><br><span class="line"></span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //判断有没有吃到食物：思路：蛇头的坐标如果和食物的坐标重合就代表吃到了</span><br><span class="line">        //先计算出蛇头真正left值</span><br><span class="line">        var x = head.x * that.snake.bodyW;</span><br><span class="line">        //再计算蛇头真正的top值</span><br><span class="line">        var y = head.y * that.snake.bodyH;</span><br><span class="line">        //判断是否迟到食物</span><br><span class="line">        if (x == that.food.x &amp;&amp; y == that.food.y) &#123;</span><br><span class="line"></span><br><span class="line">            //让蛇加一节身体</span><br><span class="line">            that.snake.body.push(</span><br><span class="line">                &#123;x: oldX, y: oldY, color: &quot;seagreen&quot;&#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            //让食物重新生成（渲染）它内部每次渲染之前都清除原来的了</span><br><span class="line">            that.food.render(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //让你根据最新位置渲染</span><br><span class="line">        that.snake.render(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;, 180);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简易贪吃蛇&quot;&gt;&lt;a href=&quot;#简易贪吃蛇&quot; class=&quot;headerlink&quot; title=&quot;简易贪吃蛇&quot;&gt;&lt;/a&gt;简易贪吃蛇&lt;/h2&gt;&lt;h3 id=&quot;项目分析&quot;&gt;&lt;a href=&quot;#项目分析&quot; class=&quot;headerlink&quot; title=&quot;项目分析&quot;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>sass 高级语法补充</title>
    <link href="http://yoursite.com/2017/04/17/Sass%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/17/Sass高级语法/</id>
    <published>2017-04-17T11:16:27.000Z</published>
    <updated>2018-03-13T11:17:10.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sass-高级语法补充"><a href="#sass-高级语法补充" class="headerlink" title="sass 高级语法补充"></a>sass 高级语法补充</h2><h3 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="selector-class">.class1</span> &#123;</span><br><span class="line">　　　　<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="selector-class">.class2</span> &#123;</span><br><span class="line">　　　　@extend .class1;</span><br><span class="line">　　　　<span class="selector-tag">font-size</span><span class="selector-pseudo">:120</span>%;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="2-混入"><a href="#2-混入" class="headerlink" title="2. 混入"></a>2. 混入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@mixin roundborder($myborder: 10px) &#123;</span><br><span class="line">    border-radius: $myborder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">    @include roundborder(25px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>//custom：自定义的，定制的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@mixin customdiv ($sizew: 100px, $sizeh: 100px, $bgco: red, $bdr: 15px) &#123;</span><br><span class="line">    border-radius: $bdr;</span><br><span class="line">    width: $sizew;</span><br><span class="line">    height: $sizeh;</span><br><span class="line">    background-color: $bgco;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box1 &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    @extend .box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.little1 &#123;</span><br><span class="line">    @include customdiv(120px, 120px, tomato, 20px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.little2 &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    @include customdiv(80px*0.5, 80px+15px, skyblue, 10px);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-计算"><a href="#3-计算" class="headerlink" title="3. 计算"></a>3. 计算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　body &#123;</span><br><span class="line">　　　　margin: (14px/2);</span><br><span class="line">　　　　top: 50px + 100px;</span><br><span class="line">　　　　right: $var * 10%;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　@function double($n) &#123;</span><br><span class="line">　　　　@return $n * 2;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　#sidebar &#123;</span><br><span class="line">　　　　width: double(5px);</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h3 id="5-判断和循环"><a href="#5-判断和循环" class="headerlink" title="5. 判断和循环"></a>5. 判断和循环</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1 to 8  大于等于1，小于8</span><br><span class="line">@<span class="keyword">for</span> $i from <span class="number">1</span> to <span class="number">8</span> &#123;</span><br><span class="line">    &amp;.slide0#&#123;$i&#125; &#123;</span><br><span class="line">        background: url("../images/02-head-icons/0#&#123;$i&#125;.jpg") no-repeat top left / 100% 100%;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">if</span> $i &gt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#less</p><h3 id="1-less的安装与使用"><a href="#1-less的安装与使用" class="headerlink" title="1. less的安装与使用"></a>1. less的安装与使用</h3><pre><code>npm install -g less</code></pre><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@background-color: #ffffff;</span><br><span class="line">@text-color: #1A237E;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: @background-color;</span><br><span class="line">  <span class="attribute">color</span>: @text-color;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: @background-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: @text-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-混入"><a href="#3-混入" class="headerlink" title="3. 混入"></a>3. 混入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#circle&#123;</span><br><span class="line">  background-color: #4CAF50;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#small-circle&#123;</span><br><span class="line">  width: 50px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  #circle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#big-circle&#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  #circle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#circle</span>(<span class="variable">@size</span>: <span class="number">25px</span>)&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@size</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@size</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#small-circle</span>&#123;</span><br><span class="line">    <span class="selector-id">#circle</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#big-circle</span>&#123;</span><br><span class="line">    <span class="selector-id">#circle</span>(<span class="number">100px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-嵌套"><a href="#4-嵌套" class="headerlink" title="4. 嵌套"></a>4. 嵌套</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#03A9F4</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line">    li&#123;</span><br><span class="line">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">        <span class="selector-tag">border-radius</span>: 3<span class="selector-tag">px</span>;</span><br><span class="line">        <span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-运算"><a href="#5-运算" class="headerlink" title="5. 运算"></a>5. 运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@div-width: 100px;</span><br><span class="line">@color: #03A9F4;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#left&#123;</span><br><span class="line">    width: @div-width;</span><br><span class="line">    background-color: @color - 100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#right&#123;</span><br><span class="line">    width: @div-width * 2;</span><br><span class="line">    background-color: @color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@var: #004590;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  background-color: @var;</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    background-color: fadeout(@var, 50%)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sass-高级语法补充&quot;&gt;&lt;a href=&quot;#sass-高级语法补充&quot; class=&quot;headerlink&quot; title=&quot;sass 高级语法补充&quot;&gt;&lt;/a&gt;sass 高级语法补充&lt;/h2&gt;&lt;h3 id=&quot;1-继承&quot;&gt;&lt;a href=&quot;#1-继承&quot; class=&quot;
      
    
    </summary>
    
      <category term="sass" scheme="http://yoursite.com/categories/sass/"/>
    
    
      <category term="sass语法" scheme="http://yoursite.com/tags/sass%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>懒加载的原理及使用</title>
    <link href="http://yoursite.com/2017/03/19/%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/19/懒加载原理及使用/</id>
    <published>2017-03-19T13:43:15.000Z</published>
    <updated>2018-03-17T01:12:35.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="懒加载的原理及使用"><a href="#懒加载的原理及使用" class="headerlink" title="懒加载的原理及使用"></a>懒加载的原理及使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把懒加载真正要加载的图片网址存在data-original=这个自定义属性里</span><br><span class="line">谁要懒加载，就用jQuery找到谁，并调用它的lazyload方法就可以了</span><br></pre></td></tr></table></figure><ol><li>不管图片隐藏还是显示  有src属性都会去加载</li><li>那么如果页面上有太多的图片  而且有些图片不在可视窗口内  如果加载了会影响页面的渲染页面时间</li><li>解决方案：自己控制图片的加载  当进入可视区域内容才去加载</li><li>怎么控制呢？ 通过控制src属性来控制图片加载 也就是说src先不给值，当滚到那张图片的显示区域时再加载</li><li>滚到以后再给它src的值，真正要显示图片的值</li><li>思路怎么样？ 首先默认所有的图片都不使用src属性，自定义一个属性存路径，当进入可视区域追加到src属性</li><li>使用插件  基于jquery的图片加载插件</li><li>jquery.lazyload.js  延时加载图片</li></ol><h3 id="插件的参数"><a href="#插件的参数" class="headerlink" title="插件的参数"></a>插件的参数</h3><ol><li>用图片提前占位</li></ol><p>placeholder : “img/grey.gif”,<br>参数:placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏</p><ol><li>载入使用何种效果</li></ol><p>effect : “fadeIn”,<br>参数：effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn</p><ol><li>提前开始加载</li></ol><p>threshold : 200,<br>参数:threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉.</p><ol><li>事件触发时才加载</li></ol><p>event : “click”,<br>参数:event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试…</p><ol><li>对某容器中的图片实现效果</li></ol><p>container: $(”#container”),<br>参数:container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片</p><ol><li>图片排序混乱时</li></ol><p>failurelimit : 10,<br>参数:failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;懒加载的原理及使用&quot;&gt;&lt;a href=&quot;#懒加载的原理及使用&quot; class=&quot;headerlink&quot; title=&quot;懒加载的原理及使用&quot;&gt;&lt;/a&gt;懒加载的原理及使用&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="懒加载" scheme="http://yoursite.com/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Canvas小鸟游戏</title>
    <link href="http://yoursite.com/2017/02/08/%E7%AC%A8%E7%AC%A8%E7%9A%84%E5%B0%8F%E9%B8%9F/"/>
    <id>http://yoursite.com/2017/02/08/笨笨的小鸟/</id>
    <published>2017-02-08T13:54:05.000Z</published>
    <updated>2018-03-06T13:54:52.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FlapyBird游戏实现"><a href="#FlapyBird游戏实现" class="headerlink" title="FlapyBird游戏实现"></a>FlapyBird游戏实现</h2><h3 id="项目需要分析"><a href="#项目需要分析" class="headerlink" title="项目需要分析"></a>项目需要分析</h3><ol><li>天空背景是连续水平滚动的</li><li>地面背景是连续水平滚动的</li><li>管道背景是连续水平滚动的，管道的高度随机，管道充当小鸟飞行的障碍物</li><li>小鸟总是在做自由落体运动，点击会给他一个向上的速度，小鸟飞行中在扇动翅膀，小鸟上飞和下落时仰角会发生变化</li><li>小鸟掉到地上，或者撞到柱子上，则游戏结束</li><li>需要在右上角显示游戏持续的时间</li></ol><h3 id="项目实现分析"><a href="#项目实现分析" class="headerlink" title="项目实现分析"></a>项目实现分析</h3><ul><li><blockquote><p>原理： 动画效果，其实就像是连环画， 每一帧，就相当于一张连环画。当播放连环画的速度极快，超过每秒24张每秒时，人的肉眼就会认会它是连续的动画效果。所有的视频播放原理都是这样的。</p></blockquote></li></ul><ol><li><p>愤怒的小鸟这个demo中，每一帧，就相当于连环画的单张画面，每一张画面上，拥有的元素都是一样的，比如小鸟、天空、地面、管道。</p></li><li><p>但是在每一张连环画上， 元素的位置不一样，当前帧的元素的状态和位置，在是上一帧的元素的状态和位置基础上重新计算的</p></li><li><p>我们可以先把画一张连环画的效果实现，现用一个系统动画，画面就会动起来了，每次执行动画时，就相当于是先把画布清空，画一张新的画面上去</p></li></ol><h3 id="确定开发步骤"><a href="#确定开发步骤" class="headerlink" title="确定开发步骤"></a>确定开发步骤</h3><ol><li>创建绘图模板</li><li>加载图片元素</li><li>天空背景实现</li><li>陆地背景实现</li><li>管道实现</li><li>小鸟实现</li><li>实现碰撞判断</li><li>时间统计实现</li></ol><h3 id="创建绘图模板"><a href="#创建绘图模板" class="headerlink" title="创建绘图模板"></a>创建绘图模板</h3><ol><li><p>代码很简单</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #canvas &#123;</span></span><br><span class="line"><span class="undefined">        border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var canvas = document.getElementById("canvas");</span></span><br><span class="line"><span class="undefined">    var ctx = canvas.getContext("2d");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="加载图片元素"><a href="#加载图片元素" class="headerlink" title="加载图片元素"></a>加载图片元素</h3><ol><li><p>先用图片名，加载图片，并生成图片对象。所有的资源图片加载成功之后，才能运行游戏</p></li><li><p>代码</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">imgNameList, callBack</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//所有图片对象</span></span><br><span class="line">    <span class="keyword">var</span> imageArr = &#123;&#125;;</span><br><span class="line">    <span class="comment">//计数，每加载完一张图片后，计数加1</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用for循环加载所有图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgNameList.length; i++) &#123;</span><br><span class="line">        <span class="comment">//创建一张图片，并保存到图片数组对象中</span></span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.src = <span class="string">"imgs/"</span> + imgNameList[i] + <span class="string">".png"</span>;</span><br><span class="line">        imageArr[imgNameList[i]] = image;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当计数和imgNameList的长度一致时，代表所有图片都加载完成了</span></span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == imgNameList.length) &#123;</span><br><span class="line">                <span class="comment">//完成回调（加载完图片之后，要做的事情）</span></span><br><span class="line">                callBack(imageArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="天空背景实现"><a href="#天空背景实现" class="headerlink" title="天空背景实现"></a>天空背景实现</h3><ul><li><p>天空，把两张天空拼在一起，不断修改这两张天空在画布的位置；当左边的天空滚出画布时，拼到第二张画布的后面重新画</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sky</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sky.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Sky,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//绘制天空</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image, <span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.image.width, <span class="keyword">this</span>.image.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.image.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x += <span class="number">2</span> * <span class="keyword">this</span>.image.width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="陆地背景实现"><a href="#陆地背景实现" class="headerlink" title="陆地背景实现"></a>陆地背景实现</h3><ul><li>地面，和天空的原理是一样的，不同的是四张地面拼在一起</li><li>代码  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Land</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.y = drawInfo.y;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Land.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Land,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//绘制天空</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.image.width, <span class="keyword">this</span>.image.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.image.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.image.width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="管道实现"><a href="#管道实现" class="headerlink" title="管道实现"></a>管道实现</h3><ul><li><p>管道，管道是六组拼在一起，不断调整它们的位置，需要注意的是　我们同时还要计算管道的垂直方向的位置，因为管道的高度是随机的</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pipe</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.topImage = drawInfo.topImage;</span><br><span class="line">    <span class="keyword">this</span>.bottomImage = drawInfo.bottomImage;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.bottom = drawInfo.bottom;</span><br><span class="line">    <span class="keyword">this</span>.space = drawInfo.space;</span><br><span class="line">    <span class="keyword">this</span>.gap = drawInfo.gap;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.canvasWidth = drawInfo.canvasWidth;</span><br><span class="line">    <span class="keyword">this</span>.canvasHeight = drawInfo.canvasHeight;</span><br><span class="line">    <span class="keyword">this</span>.topPipeHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.bottomPipeHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先计算高度</span></span><br><span class="line">    <span class="keyword">this</span>.initHeight()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pipe.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Pipe,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//画上面的管道</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.topImage, <span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        <span class="comment">//画下面的管道</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.bottomImage, <span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画两个方形</span></span><br><span class="line">        ctx.rect(<span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        ctx.rect(<span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.topImage.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x = <span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.topImage.width + <span class="keyword">this</span>.gap;</span><br><span class="line">            <span class="keyword">this</span>.initHeight();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    initHeight: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//随机计算高度</span></span><br><span class="line">        <span class="keyword">this</span>.topPipeHeight = <span class="built_in">Math</span>.random() * <span class="number">200</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.bottomPipeHeight = <span class="keyword">this</span>.canvasHeight-<span class="keyword">this</span>.topPipeHeight-<span class="keyword">this</span>.space-<span class="keyword">this</span>.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小鸟实现"><a href="#小鸟实现" class="headerlink" title="小鸟实现"></a>小鸟实现</h3><ul><li><p>小鸟（三种状态）， 翅膀在下面，翅膀在中间，翅膀在下面，执行第一次动画时，用翅膀在上面的图片，插放第二张时，用翅膀在中间的图片; 播放第三张图片时，用翅膀在下面的图片，如果循环，小乌就动起来了</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bird</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="keyword">this</span>.image.width/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="keyword">this</span>.image.height;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.y = drawInfo.y;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.aspeed = <span class="number">0.0004</span>;</span><br><span class="line">    <span class="keyword">this</span>.maxSpeed = <span class="number">0.3</span>;</span><br><span class="line">    <span class="keyword">this</span>.masAngle = <span class="number">45</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bird.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Bird,</span><br><span class="line">    draw: function (deltaTime) &#123;</span><br><span class="line">        <span class="comment">//计算小鸟当前的位置</span></span><br><span class="line">        <span class="comment">//改变后的速度</span></span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + <span class="keyword">this</span>.aspeed * deltaTime;</span><br><span class="line">        <span class="comment">//改变后的位移位置</span></span><br><span class="line">        <span class="keyword">this</span>.y += <span class="keyword">this</span>.speed * deltaTime + <span class="keyword">this</span>.aspeed*deltaTime*deltaTime/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存状态</span></span><br><span class="line">        ctx.save()</span><br><span class="line">        <span class="comment">//小鸟要以自己为中心旋转，所以要把参照原点改成自己</span></span><br><span class="line">        ctx.translate(<span class="keyword">this</span>.x + <span class="keyword">this</span>.width/<span class="number">2</span>, <span class="keyword">this</span>.y + <span class="keyword">this</span>.height/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//公式：当前速度/最大速度 = 当前角度/最大角度</span></span><br><span class="line">        <span class="keyword">var</span> currenAngle = <span class="keyword">this</span>.masAngle * <span class="keyword">this</span>.speed / <span class="keyword">this</span>.maxSpeed;</span><br><span class="line">        ctx.rotate(<span class="keyword">this</span>.angleToRadian(currenAngle));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制小鸟（9参模型，中间四个，图片的切片位置和大小，后面四个，图片的绘制位置和大小）</span></span><br><span class="line">        <span class="keyword">this</span>.index += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image,</span><br><span class="line">            <span class="keyword">this</span>.width*(<span class="keyword">this</span>.index%<span class="number">3</span>), <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height,</span><br><span class="line">            -<span class="keyword">this</span>.width/<span class="number">2</span>, -<span class="keyword">this</span>.height/<span class="number">2</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    angleToRadian: <span class="function"><span class="keyword">function</span> (<span class="params">angle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> angle / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现碰撞判断"><a href="#实现碰撞判断" class="headerlink" title="实现碰撞判断"></a>实现碰撞判断</h3><ol><li><p>碰撞判断的原理：就是判断小鸟的坐标是否超出了画布的边缘，或者是否在管道的路径之内</p></li><li><p>判断是否超出了画布的边缘</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小鸟超出了画布了</span></span><br><span class="line"><span class="keyword">if</span>(ctx.isPointInPath(bird.x + bird.width / <span class="number">2</span>, bird.y + bird.height /<span class="number">2</span>))&#123;</span><br><span class="line">    isDie = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否在管道的路径之内</p><ol><li><p>先把管道的路径绘制出来(pipe.js)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//画两个方形</span></span><br><span class="line">    ctx.rect(<span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">    ctx.rect(<span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br></pre></td></tr></table></figure></li><li><p>判断（flapyBird.html）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ctx.isPointInPath(bird.x + bird.width / <span class="number">2</span>, bird.y + bird.height /<span class="number">2</span>))&#123;</span><br><span class="line">                isDie = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="时间统计实现"><a href="#时间统计实现" class="headerlink" title="时间统计实现"></a>时间统计实现</h3><ol><li><p>获得累时间,用一下变量记录每播放一帧动画的时间(currentTime)，减去上次播放动画的时间(oldTime)，即为此帧与上一帧之间的时间差(deltaTime)；计算完时间差后，当前帧时间相对于下一帧，就变成了上一帧的时间（oldTime）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时间</span></span><br><span class="line">currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> deltaTime = currentTime - lastTime;</span><br><span class="line">lastTime = currentTime;</span><br></pre></td></tr></table></figure></li><li><p>计算时分秒、位置、并且开始执行绘制操作</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时分秒</span></span><br><span class="line">totalTime += deltaTime;</span><br><span class="line"><span class="keyword">var</span> seconds = <span class="built_in">Math</span>.floor(totalTime/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hour = <span class="built_in">Math</span>.floor(seconds/<span class="number">3600</span>);</span><br><span class="line"><span class="keyword">var</span> minute = <span class="built_in">Math</span>.floor(seconds%<span class="number">3600</span>/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> second = <span class="built_in">Math</span>.floor(seconds%<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文字及长度</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"您坚持了"</span>+hour+<span class="string">"小时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span></span><br><span class="line"><span class="keyword">var</span> textwh = ctx.measureText(text);</span><br><span class="line"><span class="comment">//文字绘制</span></span><br><span class="line">ctx.fillText(text, canvas.width - textwh.width - <span class="number">20</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FlapyBird游戏实现&quot;&gt;&lt;a href=&quot;#FlapyBird游戏实现&quot; class=&quot;headerlink&quot; title=&quot;FlapyBird游戏实现&quot;&gt;&lt;/a&gt;FlapyBird游戏实现&lt;/h2&gt;&lt;h3 id=&quot;项目需要分析&quot;&gt;&lt;a href=&quot;#项目需
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>前端向后台发送请求的几种方式</title>
    <link href="http://yoursite.com/2016/11/12/%E5%89%8D%E7%AB%AF%E5%90%91%E5%90%8E%E5%8F%B0%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/11/12/前端向后台发送请求方式/</id>
    <published>2016-11-12T06:49:03.000Z</published>
    <updated>2018-03-12T06:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端向后台发送请求的几种方式"><a href="#前端向后台发送请求的几种方式" class="headerlink" title="前端向后台发送请求的几种方式"></a>前端向后台发送请求的几种方式</h3><pre><code>1、 link标签的href属性2、 script标签的src属性3、 img标签的src属性4、 ajax发送请求5、 表单提交发送请求6、 a标签的href发送请求7、 iframe的src属性发送请求</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端向后台发送请求的几种方式&quot;&gt;&lt;a href=&quot;#前端向后台发送请求的几种方式&quot; class=&quot;headerlink&quot; title=&quot;前端向后台发送请求的几种方式&quot;&gt;&lt;/a&gt;前端向后台发送请求的几种方式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、 link标签的href
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="发送请求" scheme="http://yoursite.com/tags/%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>GET和POST</title>
    <link href="http://yoursite.com/2016/09/24/get%E5%92%8Cpost/"/>
    <id>http://yoursite.com/2016/09/24/get和post/</id>
    <published>2016-09-24T05:41:17.000Z</published>
    <updated>2018-03-16T05:09:59.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ol><li>get主要用于从服务器查询数据，post用于向服务器提交数据</li><li>get通过URL传递数据，post通过http请求传递数据</li><li>get传输数据量有限制，不能大于2kb,post传递的数据量较大，一般大量的数据和文件提交都是通过Post方式</li><li>get 安全性较低。容易在url中暴露数据，post安全性较高</li></ol><h3 id="有关-GET-请求的其他一些注释："><a href="#有关-GET-请求的其他一些注释：" class="headerlink" title="有关 GET 请求的其他一些注释："></a>有关 GET 请求的其他一些注释：</h3><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据</li></ul><h3 id="有关-POST-请求的其他一些注释："><a href="#有关-POST-请求的其他一些注释：" class="headerlink" title="有关 POST 请求的其他一些注释："></a>有关 POST 请求的其他一些注释：</h3><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GET和POST的区别&quot;&gt;&lt;a href=&quot;#GET和POST的区别&quot; class=&quot;headerlink&quot; title=&quot;GET和POST的区别&quot;&gt;&lt;/a&gt;GET和POST的区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;get主要用于从服务器查询数据，post用于向服务器提交
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="提交请求" scheme="http://yoursite.com/tags/%E6%8F%90%E4%BA%A4%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>JS对象</title>
    <link href="http://yoursite.com/2016/08/07/js%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/08/07/js对象/</id>
    <published>2016-08-07T06:37:42.000Z</published>
    <updated>2018-03-12T08:37:53.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h2><h3 id="为什么要有对象"><a href="#为什么要有对象" class="headerlink" title="为什么要有对象"></a>为什么要有对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">name, age, sex....</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。</span><br><span class="line">举例： 一部车，一个手机</span><br><span class="line">车是一类事物，门口停的那辆车才是对象</span><br><span class="line">特征：红色、四个轮子</span><br><span class="line">行为：驾驶、刹车</span><br></pre></td></tr></table></figure><h3 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript中的对象其实就是生活中对象的一个抽象</span><br><span class="line">JavaScript的对象是无序属性的集合。</span><br><span class="line">其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。</span><br><span class="line">对象的行为和特征</span><br><span class="line">特征---属性</span><br><span class="line">行为---方法</span><br></pre></td></tr></table></figure><ul><li>事物的特征在对象中用属性来表示。</li><li>事物的行为在对象中用方法来表示。</li></ul><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><blockquote><p>字面量：11 ‘abc’  true  [] {}等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs,</span></span><br><span class="line"><span class="string">  age: 18,</span></span><br><span class="line"><span class="string">  sex: true,</span></span><br><span class="line"><span class="string">  sayHi: function () &#123;</span></span><br><span class="line"><span class="string">    console.log(this.name);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>思考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如何把学生对象、老师对象、英雄对象改写成字面量的方式</span><br></pre></td></tr></table></figure><h3 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h3><ul><li><p>对象字面量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="literal">true</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>new Object()创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = <span class="string">'lisi'</span>;</span><br><span class="line">  person.age = <span class="number">35</span>;</span><br><span class="line">  person.job = <span class="string">'actor'</span>;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工厂函数创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li><li><p>自定义构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><pre><code>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能</code></pre><h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote><ol><li>构造函数用于创建一类对象，首字母要大写。</li><li>构造函数要和new一起使用才有意义。</li></ol><p>new在执行时会做四件事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new会在内存中创建一个新的空对象</span><br><span class="line">new 会让this指向这个新的对象</span><br><span class="line">执行构造函数  目的：给这个新对象加属性和方法</span><br><span class="line">new会返回这个新对象</span><br></pre></td></tr></table></figure><h3 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h3><pre><code>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解现在我们需要掌握函数内部的this几个特点    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定    2. 一般函数直接执行，内部this指向全局window    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化</code></pre><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h3><blockquote><p>通过for..in语法可以遍历一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  obj[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">"=="</span> + obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'mm'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fun(); </span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// mm </span></span><br><span class="line"><span class="keyword">delete</span> obj.name;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中的对象分为3种：内置对象、浏览器对象、自定义对象</p><p>JavaScript 提供多个内置对象：Math/Array/Number/String/Boolean…</p><p>对象只是带有<strong>属性</strong>和<strong>方法</strong>的特殊数据类型。</p><p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p><p>可以通过MDN/W3C来查询</p><p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供</p><p>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener">Math</a></p><p>演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs()    、Math.max()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI<span class="comment">// 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.random()<span class="comment">// 生成随机数</span></span><br><span class="line"><span class="built_in">Math</span>.floor()/<span class="built_in">Math</span>.ceil() <span class="comment">// 向下取整/向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round()<span class="comment">// 取整，四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.abs()<span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min() <span class="comment">// 求最大和最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sin()/<span class="built_in">Math</span>.cos() <span class="comment">// 正弦/余弦</span></span><br><span class="line"><span class="built_in">Math</span>.power()/<span class="built_in">Math</span>.sqrt() <span class="comment">// 求指数次幂/求平方根</span></span><br></pre></td></tr></table></figure><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>创建 <code>Date</code> 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());<span class="comment">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>构造函数的参数</span><br><span class="line"><span class="number">1.</span> 毫秒数 <span class="number">1498099000356</span><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1498099000356</span>)</span><br><span class="line"><span class="number">2.</span> 日期格式字符串  <span class="string">'2015-5-1'</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2015-5-1'</span>)</span><br><span class="line"><span class="number">3.</span> 年、月、日……  <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">1</span>)   <span class="comment">// 月份从0开始</span></span><br></pre></td></tr></table></figure><ul><li>获取日期的毫秒形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// valueOf用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持HTML5的浏览器，可以用下面这种方式</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">// 调用 Date对象的valueOf()</span></span><br></pre></td></tr></table></figure><ul><li>日期格式化方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toString()<span class="comment">// 转换成字符串</span></span><br><span class="line">valueOf()<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line">toDateString()</span><br><span class="line">toTimeString()</span><br><span class="line">toLocaleDateString()</span><br><span class="line">toLocaleTimeString()</span><br></pre></td></tr></table></figure><ul><li>获取日期指定部分</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getTime()    <span class="comment">// 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()</span></span><br><span class="line">getMilliseconds() </span><br><span class="line">getSeconds()  <span class="comment">// 返回0-59</span></span><br><span class="line">getMinutes()  <span class="comment">// 返回0-59</span></span><br><span class="line">getHours()    <span class="comment">// 返回0-23</span></span><br><span class="line">getDay()      <span class="comment">// 返回星期几 0周日   6周6</span></span><br><span class="line">getDate()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">getMonth()    <span class="comment">// 返回月份，***从0开始***</span></span><br><span class="line">getFullYear() <span class="comment">//返回4位的年份  如 2016</span></span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果date不是日期对象，返回</span></span><br><span class="line">  <span class="keyword">if</span> (!d <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> year = d.getFullYear(),</span><br><span class="line">      month = d.getMonth() + <span class="number">1</span>, </span><br><span class="line">      date = d.getDate(), </span><br><span class="line">      hour = d.getHours(), </span><br><span class="line">      minute = d.getMinutes(), </span><br><span class="line">      second = d.getSeconds();</span><br><span class="line">  month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line">  date = date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date;</span><br><span class="line">  hour = hour &lt; <span class="number">10</span> ? <span class="string">'0'</span> + hour : hour;</span><br><span class="line">  minute = minute &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minute:minute;</span><br><span class="line">  second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second:second;</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>计算时间差，返回相差的天/时/分/秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInterval</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> day, hour, minute, second, interval;</span><br><span class="line">  interval = end - start;</span><br><span class="line">  interval /= <span class="number">1000</span>;</span><br><span class="line">  day = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  hour = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> /<span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">  minute = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">  second = <span class="built_in">Math</span>.round(interval % <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day: day,</span><br><span class="line">    hour: hour,</span><br><span class="line">    minute: minute,</span><br><span class="line">    second: second</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li>创建数组对象的两种方式<ul><li>字面量方式</li><li>new Array()</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 使用构造函数创建数组对象</span></span><br><span class="line"><span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了3个字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>);</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了4个数字</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用字面量创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中元素的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br></pre></td></tr></table></figure><ul><li><p>检测一个对象是否是数组</p><ul><li>instanceof</li><li>Array.isArray()     HTML5中提供的方法，有兼容性问题</li></ul><p>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</p></li><li><p>toString()/valueOf()</p><ul><li>toString()        把数组转换成字符串，逗号分隔每一项</li><li>valueOf()         返回数组对象本身</li></ul></li><li><p>数组常用方法</p><p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 栈操作(先进后出)</span></span><br><span class="line">push()</span><br><span class="line">pop() <span class="comment">//取出数组中的最后一项，修改length属性</span></span><br><span class="line"><span class="comment">// 2 队列操作(先进先出)</span></span><br><span class="line">push()</span><br><span class="line">shift()<span class="comment">//取出数组中的第一个元素，修改length属性</span></span><br><span class="line">unshift() <span class="comment">//在数组最前面插入项，返回数组的长度</span></span><br><span class="line"><span class="comment">// 3 排序方法</span></span><br><span class="line">reverse()<span class="comment">//翻转数组</span></span><br><span class="line">sort(); <span class="comment">//即使是数组sort也是根据字符，从小到大排序</span></span><br><span class="line"><span class="comment">// 带参数的sort是如何实现的？</span></span><br><span class="line"><span class="comment">// 4 操作方法</span></span><br><span class="line">concat()  <span class="comment">//把参数拼接到当前数组</span></span><br><span class="line">slice() <span class="comment">//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始</span></span><br><span class="line">splice()<span class="comment">//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</span></span><br><span class="line"><span class="comment">// 5 位置方法</span></span><br><span class="line">indexOf()、lastIndexOf()   <span class="comment">//如果没找到返回-1</span></span><br><span class="line"><span class="comment">// 6 迭代方法 不会修改原数组(可选)</span></span><br><span class="line">every()、filter()、forEach()、map()、some()</span><br><span class="line"><span class="comment">// 7 方法将数组的所有元素连接到一个字符串中。</span></span><br><span class="line">join()</span><br></pre></td></tr></table></figure><ul><li>清空数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1 推荐 </span></span><br><span class="line">arr = [];</span><br><span class="line"><span class="comment">// 方式2 </span></span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ul><li>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myJoin</span>(<span class="params">array, seperator</span>) </span>&#123;</span><br><span class="line">  seperator = seperator || <span class="string">','</span>;</span><br><span class="line">  array = array || [];</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> str = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    str += seperator + array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myJoin(array, <span class="string">'-'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.join(<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure><ul><li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[<span class="keyword">this</span>.length - i - <span class="number">1</span>];</span><br><span class="line">    arr[arr.length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myReverse(array));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.reverse());</span><br></pre></td></tr></table></figure><ul><li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> tmpArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(array[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    tmpArray.push(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tmpArray);</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line">array = array.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><ul><li>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = array.indexOf(<span class="string">'a'</span>,index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>编写一个方法去掉一个数组的重复元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = array[i];</span><br><span class="line">    <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">      o[item]++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      o[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmpArray = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o[key] == <span class="number">1</span>) &#123;</span><br><span class="line">      tmpArray.push(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(tmpArray.indexOf(key) == <span class="number">-1</span>)&#123;</span><br><span class="line">        tmpArray.push(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  returm tmpArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clear(array));</span><br></pre></td></tr></table></figure><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码的问题？</span></span><br><span class="line"><span class="comment">// s1是基本类型，基本类型是没有方法的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建基本包装类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;  <span class="comment">//数值，基本类型</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'18'</span>); <span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">18</span>); <span class="comment">//基本包装类型，对象</span></span><br><span class="line"><span class="comment">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = b1 &amp;&amp; <span class="literal">true</span>;<span class="comment">// 结果是什么</span></span><br></pre></td></tr></table></figure><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>字符串的不可变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure><ul><li>创建字符串对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串中字符的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><ul><li><p>字符串对象的常用方法</p><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 字符方法</span></span><br><span class="line">charAt()    <span class="comment">//获取指定位置处字符</span></span><br><span class="line">charCodeAt()  <span class="comment">//获取指定位置处字符的ASCII码</span></span><br><span class="line">str[<span class="number">0</span>]   <span class="comment">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class="line"><span class="comment">// 2 字符串操作方法</span></span><br><span class="line">concat()   <span class="comment">//拼接字符串，等效于+，+更常用</span></span><br><span class="line">slice()    <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line">substring() <span class="comment">//从start位置开始，截取到end位置，end取不到</span></span><br><span class="line">substr()   <span class="comment">//从start位置开始，截取length个字符</span></span><br><span class="line"><span class="comment">// 3 位置方法</span></span><br><span class="line">indexOf()   <span class="comment">//返回指定内容在元字符串中的位置</span></span><br><span class="line">lastIndexOf() <span class="comment">//从后往前找，只找第一个匹配的</span></span><br><span class="line"><span class="comment">// 4 去除空白   </span></span><br><span class="line">trim()  <span class="comment">//只能去除字符串前后的空白</span></span><br><span class="line"><span class="comment">// 5 大小写转换方法</span></span><br><span class="line">to(Locale)UpperCase() <span class="comment">//转换大写</span></span><br><span class="line">to(Locale)LowerCase() <span class="comment">//转换小写</span></span><br><span class="line"><span class="comment">// 6 其它</span></span><br><span class="line">search()</span><br><span class="line">replace()</span><br><span class="line">split()</span><br><span class="line">fromCharCode()</span><br><span class="line"><span class="comment">// String.fromCharCode(101, 102, 103); //把ASCII码转换成字符串</span></span><br></pre></td></tr></table></figure><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><ul><li>截取字符串”我爱中华人民共和国”，中的”中华”</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"我爱中华人民共和国"</span>;</span><br><span class="line">s = s.substr(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure><ul><li>“abcoefoxyozzopp”查找字符串中所有o出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> index = s.indexOf(<span class="string">'o'</span>, index + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">    array.push(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (index &gt; <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><ul><li>把字符串中所有的o替换成!</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  s = s.replace(<span class="string">'o'</span>, <span class="string">''</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (s.indexOf(<span class="string">'o'</span>) &gt; <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.replace(<span class="regexp">/o/ig</span>, <span class="string">''</span>));</span><br></pre></td></tr></table></figure><ul><li>判断一个字符串中出现次数最多的字符，统计这个次数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'abcoefoxyozzopp'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = s.charAt(i);</span><br><span class="line">  <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">    o[item] ++;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    o[item] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> char ;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="keyword">if</span> (max &lt; o[key]) &#123;</span><br><span class="line">    max = o[key];</span><br><span class="line">    char = key;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max);</span><br><span class="line"><span class="built_in">console</span>.log(char);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JS对象&quot;&gt;&lt;a href=&quot;#JS对象&quot; class=&quot;headerlink&quot; title=&quot;JS对象&quot;&gt;&lt;/a&gt;JS对象&lt;/h2&gt;&lt;h3 id=&quot;为什么要有对象&quot;&gt;&lt;a href=&quot;#为什么要有对象&quot; class=&quot;headerlink&quot; title=&quot;为什么
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css高清背景图</title>
    <link href="http://yoursite.com/2016/07/18/css%E9%AB%98%E6%B8%85%E5%9B%BE/"/>
    <id>http://yoursite.com/2016/07/18/css高清图/</id>
    <published>2016-07-18T09:07:05.000Z</published>
    <updated>2018-03-12T07:12:26.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS高清背景图"><a href="#CSS高清背景图" class="headerlink" title="CSS高清背景图"></a>CSS高清背景图</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>现在的手机普遍使用的都是高清图，也就意味着屏幕有两个宽度<ol><li>css的像素的宽度： 在开发过程中，布局直接使用的宽度</li><li>手机硬件的分辨率的宽度，一般情况下和CSS的宽度是一致的，但是近几年，都流行高清屏，硬件的宽度一般是css宽度的2倍或3倍，这个时候就需要使用高清图片</li><li>在前端开发的时候，一般使用一个2倍图就可以了</li></ol></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>假如我们使用的就是一个小图标： 那么只需要把 background-size 设为图片本身的一半，就可以了<br> ´background: url(“./images/im_2x.png”) no-repeat 0px 0px /57px 21px;</li><li>如果使用的是精灵图： 那么要做的事情<ol><li>把background-position:x y; 设为它本来在精灵的位置的一半。</li><li>把background-size 也设为图片本身宽度的一半。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS高清背景图&quot;&gt;&lt;a href=&quot;#CSS高清背景图&quot; class=&quot;headerlink&quot; title=&quot;CSS高清背景图&quot;&gt;&lt;/a&gt;CSS高清背景图&lt;/h2&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
