<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yang.Xu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-06T14:39:18.078Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yang.Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/03/06/DOM%E5%85%83%E7%B4%A0%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/03/06/DOM元素的增删改查操作/</id>
    <published>2018-03-06T14:25:25.448Z</published>
    <updated>2018-03-06T14:39:18.078Z</updated>
    
    <content type="html"><![CDATA[<p>###获得页面元素的方式</p><ol><li>document.getElementById();     //方法可返回对拥有指定 ID 的第一个对象的引用</li><li>document.getElementsByTagName();    //返回带有指定标签名的对象集合。</li><li>document.getElementsByClassName();    //方法返回文档中所有指定类名的元素集合</li><li>querySelector();     //方法仅仅返回匹配指定选择器的第一个元素。如需返回所有的元素，请使用 querySelectorAll() 方法替代。</li><li>querySelectorAll()；  // 是HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###获得页面元素的方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;document.getElementById();     //方法可返回对拥有指定 ID 的第一个对象的引用&lt;/li&gt;
&lt;li&gt;document.getElementsByTagName();    //返回带有指定标
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Canvas动画</title>
    <link href="http://yoursite.com/2018/03/06/Canvas%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2018/03/06/Canvas动画/</id>
    <published>2018-03-06T13:37:05.000Z</published>
    <updated>2018-03-06T13:44:33.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画与变形"><a href="#动画与变形" class="headerlink" title="动画与变形"></a>动画与变形</h2><h3 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h3><ol><li>动画的原理，就是一张张画面连续快速播放，当速度超过每秒24张时，人的肉眼就不会分辨出卡顿感。而觉得是在播放连续的视频动画</li><li>所以， 我们要实现动画，只需要隔十几毫秒把屏幕清空之后，重新绘制下一帧就可以了</li></ol><h3 id="执行动画方案"><a href="#执行动画方案" class="headerlink" title="执行动画方案"></a>执行动画方案</h3><ol><li>我们可以用window.setInterval(), window.setTimeout(),和window.requestAnimationFrame()来设定定期执行一个指定函数。</li><li>setInterval(function, delay): 当设定好间隔时间后，function会定期执行。</li><li>setTimeout(function, delay): 在设定好的时间之后执行函数</li><li>requestAnimationFrame(callback): 递归调用的形式才实现动画，动画的频率跟随浏览器的刷新频率，效率比较高，连续动画都使用这种方式就可以了</li></ol><h3 id="弹球动画讲解"><a href="#弹球动画讲解" class="headerlink" title="弹球动画讲解"></a>弹球动画讲解</h3><ol><li><p>先实现绘制某一帧的方法(draw())</p><ol><li>清空canvas</li><li>绘制小球</li><li>更改小球的位置</li></ol></li><li><p>添加一个动画(window.requesAnimationFrame(draw))</p></li><li><p>边界处理</p><ul><li>如果小球到达边界，修改其速度为反方向；</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">    <span class="keyword">var</span> animation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个圆对象</span></span><br><span class="line">    <span class="keyword">var</span> circle = &#123;</span><br><span class="line">        radias: <span class="number">30</span>,</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        speedx: <span class="number">2</span>,</span><br><span class="line">        speedy: <span class="number">1</span>,</span><br><span class="line">        isRunning: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        draw: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//画一个圆</span></span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radias, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//每一帧，圆的位置都会发生变化</span></span><br><span class="line">        circle.x += circle.speedx;</span><br><span class="line">        circle.y += circle.speedy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//边界判断，到了边界就调头</span></span><br><span class="line">        <span class="keyword">if</span> (circle.x == canvas.width-circle.radias || circle.x == circle.radias) &#123;</span><br><span class="line">            circle.speedx = -circle.speedx;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (circle.y == canvas.height-circle.radias || circle.y == circle.radias) &#123;</span><br><span class="line">            circle.speedy = -circle.speedy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制小球，绘制当前帧，把上一帧的画面清空</span></span><br><span class="line">        <span class="comment">//ctx.clearRect(0, 0, canvas.width, canvas.height);</span></span><br><span class="line">        ctx.save();</span><br><span class="line">        ctx.fillStyle = <span class="string">"rgba(255,255,255,0.2)"</span>;</span><br><span class="line">        <span class="comment">//ctx.fillStyle = "red";</span></span><br><span class="line">        ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br><span class="line">        ctx.restore();</span><br><span class="line">        circle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始执行动画</span></span><br><span class="line">        animation = <span class="built_in">window</span>.requestAnimationFrame(draw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加点击事件，当点击时，如果正在运行，则暂停，如果没有正在运行，则点击动行</span></span><br><span class="line">    canvas.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!circle.isRunning) &#123;</span><br><span class="line">            circle.x = e.clientX;</span><br><span class="line">            circle.y = e.clientY;</span><br><span class="line">            animation = <span class="built_in">window</span>.requestAnimationFrame(draw);</span><br><span class="line">            circle.isRunning = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            circle.isRunning = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">window</span>.cancelAnimationFrame(animation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><ol><li><p>scale是用来缩放画布元素的坐标和宽高。如果一张（100*100）的画布，scale为（0.5, 0.5），用fillRect(50, 50, 50, 50)来画一个正方形，实际显示效果未缩放前的（25, 25, 25, 25）位置和大小的效果是一样的。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔的粗细和颜色</span></span><br><span class="line">    ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将画笔移动到某个点</span></span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2. 从上面这个点开始，划一条直接到某一个点</span></span><br><span class="line">    ctx.lineTo(<span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="comment">//3. 填充颜色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"></span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    ctx.scale(<span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h4><ol><li><p>平移就是改变往水平或垂直方向，改变参考原点的值。translate(100, 100);就是绘图时，在当前参考原点的基本之上，向右平移100像素，向下平移100像素。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔的粗细和颜色</span></span><br><span class="line">    ctx.lineWidth = <span class="number">1</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将画笔移动到某个点</span></span><br><span class="line">    ctx.moveTo(<span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="comment">//2. 从上面这个点开始，划一条直接到某一个点</span></span><br><span class="line">    ctx.lineTo(<span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">300</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">    <span class="comment">//3. 填充颜色</span></span><br><span class="line">    ctx.stroke();</span><br><span class="line"></span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.fillRect(<span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><ol><li><p>旋转，就是围绕当前的原点，坐标系发生旋转。</p></li><li><p>代码与示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画30条直线，角度不一样</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++) &#123;</span><br><span class="line">        ctx.rotate(<span class="number">1</span>/<span class="number">15</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.restore();</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画与变形&quot;&gt;&lt;a href=&quot;#动画与变形&quot; class=&quot;headerlink&quot; title=&quot;动画与变形&quot;&gt;&lt;/a&gt;动画与变形&lt;/h2&gt;&lt;h3 id=&quot;动画原理&quot;&gt;&lt;a href=&quot;#动画原理&quot; class=&quot;headerlink&quot; title=&quot;动画原理&quot;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas小鸟游戏</title>
    <link href="http://yoursite.com/2017/02/08/%E7%AC%A8%E7%AC%A8%E7%9A%84%E5%B0%8F%E9%B8%9F/"/>
    <id>http://yoursite.com/2017/02/08/笨笨的小鸟/</id>
    <published>2017-02-08T13:54:05.000Z</published>
    <updated>2018-03-06T13:54:52.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FlapyBird游戏实现"><a href="#FlapyBird游戏实现" class="headerlink" title="FlapyBird游戏实现"></a>FlapyBird游戏实现</h2><h3 id="项目需要分析"><a href="#项目需要分析" class="headerlink" title="项目需要分析"></a>项目需要分析</h3><ol><li>天空背景是连续水平滚动的</li><li>地面背景是连续水平滚动的</li><li>管道背景是连续水平滚动的，管道的高度随机，管道充当小鸟飞行的障碍物</li><li>小鸟总是在做自由落体运动，点击会给他一个向上的速度，小鸟飞行中在扇动翅膀，小鸟上飞和下落时仰角会发生变化</li><li>小鸟掉到地上，或者撞到柱子上，则游戏结束</li><li>需要在右上角显示游戏持续的时间</li></ol><h3 id="项目实现分析"><a href="#项目实现分析" class="headerlink" title="项目实现分析"></a>项目实现分析</h3><ul><li><blockquote><p>原理： 动画效果，其实就像是连环画， 每一帧，就相当于一张连环画。当播放连环画的速度极快，超过每秒24张每秒时，人的肉眼就会认会它是连续的动画效果。所有的视频播放原理都是这样的。</p></blockquote></li></ul><ol><li><p>愤怒的小鸟这个demo中，每一帧，就相当于连环画的单张画面，每一张画面上，拥有的元素都是一样的，比如小鸟、天空、地面、管道。</p></li><li><p>但是在每一张连环画上， 元素的位置不一样，当前帧的元素的状态和位置，在是上一帧的元素的状态和位置基础上重新计算的</p></li><li><p>我们可以先把画一张连环画的效果实现，现用一个系统动画，画面就会动起来了，每次执行动画时，就相当于是先把画布清空，画一张新的画面上去</p></li></ol><h3 id="确定开发步骤"><a href="#确定开发步骤" class="headerlink" title="确定开发步骤"></a>确定开发步骤</h3><ol><li>创建绘图模板</li><li>加载图片元素</li><li>天空背景实现</li><li>陆地背景实现</li><li>管道实现</li><li>小鸟实现</li><li>实现碰撞判断</li><li>时间统计实现</li></ol><h3 id="创建绘图模板"><a href="#创建绘图模板" class="headerlink" title="创建绘图模板"></a>创建绘图模板</h3><ol><li><p>代码很简单</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #canvas &#123;</span></span><br><span class="line"><span class="undefined">        border: 1px solid #000;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var canvas = document.getElementById("canvas");</span></span><br><span class="line"><span class="undefined">    var ctx = canvas.getContext("2d");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="加载图片元素"><a href="#加载图片元素" class="headerlink" title="加载图片元素"></a>加载图片元素</h3><ol><li><p>先用图片名，加载图片，并生成图片对象。所有的资源图片加载成功之后，才能运行游戏</p></li><li><p>代码</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">imgNameList, callBack</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//所有图片对象</span></span><br><span class="line">    <span class="keyword">var</span> imageArr = &#123;&#125;;</span><br><span class="line">    <span class="comment">//计数，每加载完一张图片后，计数加1</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用for循环加载所有图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgNameList.length; i++) &#123;</span><br><span class="line">        <span class="comment">//创建一张图片，并保存到图片数组对象中</span></span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.src = <span class="string">"imgs/"</span> + imgNameList[i] + <span class="string">".png"</span>;</span><br><span class="line">        imageArr[imgNameList[i]] = image;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当计数和imgNameList的长度一致时，代表所有图片都加载完成了</span></span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (count == imgNameList.length) &#123;</span><br><span class="line">                <span class="comment">//完成回调（加载完图片之后，要做的事情）</span></span><br><span class="line">                callBack(imageArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="天空背景实现"><a href="#天空背景实现" class="headerlink" title="天空背景实现"></a>天空背景实现</h3><ul><li><p>天空，把两张天空拼在一起，不断修改这两张天空在画布的位置；当左边的天空滚出画布时，拼到第二张画布的后面重新画</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sky</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sky.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Sky,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//绘制天空</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image, <span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.image.width, <span class="keyword">this</span>.image.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.image.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x += <span class="number">2</span> * <span class="keyword">this</span>.image.width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="陆地背景实现"><a href="#陆地背景实现" class="headerlink" title="陆地背景实现"></a>陆地背景实现</h3><ul><li>地面，和天空的原理是一样的，不同的是四张地面拼在一起</li><li>代码  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Land</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.y = drawInfo.y;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Land.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Land,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//绘制天空</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.image.width, <span class="keyword">this</span>.image.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.image.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.image.width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="管道实现"><a href="#管道实现" class="headerlink" title="管道实现"></a>管道实现</h3><ul><li><p>管道，管道是六组拼在一起，不断调整它们的位置，需要注意的是　我们同时还要计算管道的垂直方向的位置，因为管道的高度是随机的</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pipe</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.topImage = drawInfo.topImage;</span><br><span class="line">    <span class="keyword">this</span>.bottomImage = drawInfo.bottomImage;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.bottom = drawInfo.bottom;</span><br><span class="line">    <span class="keyword">this</span>.space = drawInfo.space;</span><br><span class="line">    <span class="keyword">this</span>.gap = drawInfo.gap;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.canvasWidth = drawInfo.canvasWidth;</span><br><span class="line">    <span class="keyword">this</span>.canvasHeight = drawInfo.canvasHeight;</span><br><span class="line">    <span class="keyword">this</span>.topPipeHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.bottomPipeHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//先计算高度</span></span><br><span class="line">    <span class="keyword">this</span>.initHeight()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pipe.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Pipe,</span><br><span class="line">    draw: function () &#123;</span><br><span class="line">        <span class="comment">//画上面的管道</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.topImage, <span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        <span class="comment">//画下面的管道</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.bottomImage, <span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//画两个方形</span></span><br><span class="line">        ctx.rect(<span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        ctx.rect(<span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移动坐标</span></span><br><span class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.topImage.width) &#123;</span><br><span class="line">            <span class="keyword">this</span>.x = <span class="keyword">this</span>.canvasWidth - <span class="keyword">this</span>.topImage.width + <span class="keyword">this</span>.gap;</span><br><span class="line">            <span class="keyword">this</span>.initHeight();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    initHeight: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//随机计算高度</span></span><br><span class="line">        <span class="keyword">this</span>.topPipeHeight = <span class="built_in">Math</span>.random() * <span class="number">200</span> + <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">this</span>.bottomPipeHeight = <span class="keyword">this</span>.canvasHeight-<span class="keyword">this</span>.topPipeHeight-<span class="keyword">this</span>.space-<span class="keyword">this</span>.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小鸟实现"><a href="#小鸟实现" class="headerlink" title="小鸟实现"></a>小鸟实现</h3><ul><li><p>小鸟（三种状态）， 翅膀在下面，翅膀在中间，翅膀在下面，执行第一次动画时，用翅膀在上面的图片，插放第二张时，用翅膀在中间的图片; 播放第三张图片时，用翅膀在下面的图片，如果循环，小乌就动起来了</p></li><li><p>代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bird</span> (<span class="params">drawInfo</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = drawInfo.ctx;</span><br><span class="line">    <span class="keyword">this</span>.image = drawInfo.image;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="keyword">this</span>.image.width/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="keyword">this</span>.image.height;</span><br><span class="line">    <span class="keyword">this</span>.x = drawInfo.x;</span><br><span class="line">    <span class="keyword">this</span>.y = drawInfo.y;</span><br><span class="line">    <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.aspeed = <span class="number">0.0004</span>;</span><br><span class="line">    <span class="keyword">this</span>.maxSpeed = <span class="number">0.3</span>;</span><br><span class="line">    <span class="keyword">this</span>.masAngle = <span class="number">45</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bird.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Bird,</span><br><span class="line">    draw: function (deltaTime) &#123;</span><br><span class="line">        <span class="comment">//计算小鸟当前的位置</span></span><br><span class="line">        <span class="comment">//改变后的速度</span></span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + <span class="keyword">this</span>.aspeed * deltaTime;</span><br><span class="line">        <span class="comment">//改变后的位移位置</span></span><br><span class="line">        <span class="keyword">this</span>.y += <span class="keyword">this</span>.speed * deltaTime + <span class="keyword">this</span>.aspeed*deltaTime*deltaTime/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存状态</span></span><br><span class="line">        ctx.save()</span><br><span class="line">        <span class="comment">//小鸟要以自己为中心旋转，所以要把参照原点改成自己</span></span><br><span class="line">        ctx.translate(<span class="keyword">this</span>.x + <span class="keyword">this</span>.width/<span class="number">2</span>, <span class="keyword">this</span>.y + <span class="keyword">this</span>.height/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//公式：当前速度/最大速度 = 当前角度/最大角度</span></span><br><span class="line">        <span class="keyword">var</span> currenAngle = <span class="keyword">this</span>.masAngle * <span class="keyword">this</span>.speed / <span class="keyword">this</span>.maxSpeed;</span><br><span class="line">        ctx.rotate(<span class="keyword">this</span>.angleToRadian(currenAngle));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制小鸟（9参模型，中间四个，图片的切片位置和大小，后面四个，图片的绘制位置和大小）</span></span><br><span class="line">        <span class="keyword">this</span>.index += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.image,</span><br><span class="line">            <span class="keyword">this</span>.width*(<span class="keyword">this</span>.index%<span class="number">3</span>), <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height,</span><br><span class="line">            -<span class="keyword">this</span>.width/<span class="number">2</span>, -<span class="keyword">this</span>.height/<span class="number">2</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        ctx.restore();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    angleToRadian: <span class="function"><span class="keyword">function</span> (<span class="params">angle</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> angle / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现碰撞判断"><a href="#实现碰撞判断" class="headerlink" title="实现碰撞判断"></a>实现碰撞判断</h3><ol><li><p>碰撞判断的原理：就是判断小鸟的坐标是否超出了画布的边缘，或者是否在管道的路径之内</p></li><li><p>判断是否超出了画布的边缘</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小鸟超出了画布了</span></span><br><span class="line"><span class="keyword">if</span>(ctx.isPointInPath(bird.x + bird.width / <span class="number">2</span>, bird.y + bird.height /<span class="number">2</span>))&#123;</span><br><span class="line">    isDie = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否在管道的路径之内</p><ol><li><p>先把管道的路径绘制出来(pipe.js)</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//画两个方形</span></span><br><span class="line">    ctx.rect(<span class="keyword">this</span>.x, <span class="number">0</span>, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.topPipeHeight);</span><br><span class="line">    ctx.rect(<span class="keyword">this</span>.x, <span class="keyword">this</span>.topPipeHeight + <span class="keyword">this</span>.space, <span class="keyword">this</span>.topImage.width, <span class="keyword">this</span>.bottomPipeHeight);</span><br></pre></td></tr></table></figure></li><li><p>判断（flapyBird.html）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ctx.isPointInPath(bird.x + bird.width / <span class="number">2</span>, bird.y + bird.height /<span class="number">2</span>))&#123;</span><br><span class="line">                isDie = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="时间统计实现"><a href="#时间统计实现" class="headerlink" title="时间统计实现"></a>时间统计实现</h3><ol><li><p>获得累时间,用一下变量记录每播放一帧动画的时间(currentTime)，减去上次播放动画的时间(oldTime)，即为此帧与上一帧之间的时间差(deltaTime)；计算完时间差后，当前帧时间相对于下一帧，就变成了上一帧的时间（oldTime）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时间</span></span><br><span class="line">currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> deltaTime = currentTime - lastTime;</span><br><span class="line">lastTime = currentTime;</span><br></pre></td></tr></table></figure></li><li><p>计算时分秒、位置、并且开始执行绘制操作</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算时分秒</span></span><br><span class="line">totalTime += deltaTime;</span><br><span class="line"><span class="keyword">var</span> seconds = <span class="built_in">Math</span>.floor(totalTime/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hour = <span class="built_in">Math</span>.floor(seconds/<span class="number">3600</span>);</span><br><span class="line"><span class="keyword">var</span> minute = <span class="built_in">Math</span>.floor(seconds%<span class="number">3600</span>/<span class="number">60</span>);</span><br><span class="line"><span class="keyword">var</span> second = <span class="built_in">Math</span>.floor(seconds%<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文字及长度</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"您坚持了"</span>+hour+<span class="string">"小时"</span>+minute+<span class="string">"分"</span>+second+<span class="string">"秒"</span></span><br><span class="line"><span class="keyword">var</span> textwh = ctx.measureText(text);</span><br><span class="line"><span class="comment">//文字绘制</span></span><br><span class="line">ctx.fillText(text, canvas.width - textwh.width - <span class="number">20</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FlapyBird游戏实现&quot;&gt;&lt;a href=&quot;#FlapyBird游戏实现&quot; class=&quot;headerlink&quot; title=&quot;FlapyBird游戏实现&quot;&gt;&lt;/a&gt;FlapyBird游戏实现&lt;/h2&gt;&lt;h3 id=&quot;项目需要分析&quot;&gt;&lt;a href=&quot;#项目需
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
</feed>
