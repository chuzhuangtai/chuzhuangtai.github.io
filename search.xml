<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Canvas动画]]></title>
    <url>%2F2018%2F03%2F01%2FCanvas%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[动画与变形动画原理 动画的原理，就是一张张画面连续快速播放，当速度超过每秒24张时，人的肉眼就不会分辨出卡顿感。而觉得是在播放连续的视频动画 所以， 我们要实现动画，只需要隔十几毫秒把屏幕清空之后，重新绘制下一帧就可以了 执行动画方案 我们可以用window.setInterval(), window.setTimeout(),和window.requestAnimationFrame()来设定定期执行一个指定函数。 setInterval(function, delay): 当设定好间隔时间后，function会定期执行。 setTimeout(function, delay): 在设定好的时间之后执行函数 requestAnimationFrame(callback): 递归调用的形式才实现动画，动画的频率跟随浏览器的刷新频率，效率比较高，连续动画都使用这种方式就可以了 弹球动画讲解 先实现绘制某一帧的方法(draw()) 清空canvas 绘制小球 更改小球的位置 添加一个动画(window.requesAnimationFrame(draw)) 边界处理 如果小球到达边界，修改其速度为反方向； 代码实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;script&gt; var canvas = document.getElementById("canvas"); var ctx = canvas.getContext("2d"); ctx.fillStyle = "blue"; var animation; //创建一个圆对象 var circle = &#123; radias: 30, x: 0, y: 0, speedx: 2, speedy: 1, isRunning: false, draw: function () &#123; //画一个圆 ctx.beginPath(); ctx.arc(this.x, this.y, this.radias, 0, 2*Math.PI); ctx.fill(); &#125; &#125;; function draw() &#123; //每一帧，圆的位置都会发生变化 circle.x += circle.speedx; circle.y += circle.speedy; //边界判断，到了边界就调头 if (circle.x == canvas.width-circle.radias || circle.x == circle.radias) &#123; circle.speedx = -circle.speedx; &#125; if (circle.y == canvas.height-circle.radias || circle.y == circle.radias) &#123; circle.speedy = -circle.speedy; &#125; //绘制小球，绘制当前帧，把上一帧的画面清空 //ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.save(); ctx.fillStyle = "rgba(255,255,255,0.2)"; //ctx.fillStyle = "red"; ctx.fillRect(0,0,canvas.width,canvas.height); ctx.restore(); circle.draw(); //开始执行动画 animation = window.requestAnimationFrame(draw); &#125; //添加点击事件，当点击时，如果正在运行，则暂停，如果没有正在运行，则点击动行 canvas.addEventListener("click", function (e) &#123; if (!circle.isRunning) &#123; circle.x = e.clientX; circle.y = e.clientY; animation = window.requestAnimationFrame(draw); circle.isRunning = true; &#125; else &#123; circle.isRunning = false; window.cancelAnimationFrame(animation); &#125; &#125;);&lt;/script&gt; 变形缩放 scale是用来缩放画布元素的坐标和宽高。如果一张（100*100）的画布，scale为（0.5, 0.5），用fillRect(50, 50, 50, 50)来画一个正方形，实际显示效果未缩放前的（25, 25, 25, 25）位置和大小的效果是一样的。 代码与示例 1234567891011121314151617181920212223&lt;script&gt; var canvas = document.getElementById("canvas"); var ctx = canvas.getContext("2d"); //设置画笔的粗细和颜色 ctx.lineWidth = 1; ctx.strokeStyle = "red"; //1. 将画笔移动到某个点 ctx.moveTo(0, 200); //2. 从上面这个点开始，划一条直接到某一个点 ctx.lineTo(600, 200); ctx.moveTo(300, 0); ctx.lineTo(300, 400); //3. 填充颜色 ctx.stroke(); ctx.fillRect(300, 200, 100, 100); ctx.scale(0.5, 0.5); ctx.fillRect(300, 200, 100, 100);&lt;/script&gt; 平移 平移就是改变往水平或垂直方向，改变参考原点的值。translate(100, 100);就是绘图时，在当前参考原点的基本之上，向右平移100像素，向下平移100像素。 代码与示例 1234567891011121314151617181920212223&lt;script&gt; var canvas = document.getElementById("canvas"); var ctx = canvas.getContext("2d"); //设置画笔的粗细和颜色 ctx.lineWidth = 1; ctx.strokeStyle = "red"; //1. 将画笔移动到某个点 ctx.moveTo(0, 200); //2. 从上面这个点开始，划一条直接到某一个点 ctx.lineTo(600, 200); ctx.moveTo(300, 0); ctx.lineTo(300, 400); //3. 填充颜色 ctx.stroke(); ctx.fillRect(300, 200, 100, 100); ctx.translate(100, 100); ctx.fillRect(300, 200, 100, 100);&lt;/script&gt; 旋转 旋转，就是围绕当前的原点，坐标系发生旋转。 代码与示例 12345678910111213141516171819&lt;script&gt; var canvas = document.getElementById("canvas"); var ctx = canvas.getContext("2d"); ctx.save(); ctx.translate(200, 200); //画30条直线，角度不一样 for (var i=0; i&lt;30; i++) &#123; ctx.rotate(1/15*Math.PI); ctx.beginPath(); ctx.moveTo(30, 0); ctx.lineTo(150, 0); ctx.stroke(); &#125; ctx.restore();&lt;/script&gt; ​]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[响应式viewport设计]]></title>
    <url>%2F2018%2F01%2F14%2Fviewport%2F</url>
    <content type="text"><![CDATA[响应式viewport设计什么是 Viewport?viewport 是用户网页的可视区域。 viewport 翻译为中文可以叫做”视区”。 在移动设备里面， 屏幕可以把它相像成一个窗户。 网页是在窗户的后面一个叫做 视区（viewport）的区域显示的。 就相当于在窗记的后面有一块可以滑动的幕布。 一般情况下， viewport的宽度，会比手机的实际的宽度要大。 viewport的背景： 在智能手机才出来的时候，所有的pc端的网页，要想在手机上完整显示， 必须只能左右滑动。 这样的话只能让手机的可视区。比手机屏幕的宽度要大。 就产生了一个问题： 在布局的时候，如果使用百分比布局，参考的屏幕的宽度可能是一个错误的值。 强制去设置视口的宽度和屏幕的宽度一致。 &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; viewport的属性的介绍 height：和 width 相对应，指定高度。 initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。 maximum-scale：允许用户缩放到的最大比例。 minimum-scale：允许用户缩放到的最小比例。 user-scalable：用户是否可以手动缩放。]]></content>
      <categories>
        <category>web移动端</category>
      </categories>
      <tags>
        <tag>viewport设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS的本地保存用法总结]]></title>
    <url>%2F2018%2F01%2F09%2F%E6%9C%AC%E5%9C%B0%E4%BF%9D%E5%AD%98%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[JS的本地保存用法总结localStorage和sessionStorage的区别 JS中为了减少与服务器的通信，经常会用到保存的数据到本地的功能，例如本地用户信息保存。 1. localStorage和sessionStorage一样都是用来存储客户端临时信息的对象。 2. 他们均只能存储字符串类型的对象（虽然规范中可以存储其他原生类型的对象，但是目前为止没有浏览器对其进行实现）。 3. localStorage生命周期是永久，这意味着除非用户显示在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了 4. 不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。 localStorage、和sessionStorage的用法123456789101112131415161718192021localStorage和sessionStorage使用时使用相同的API：localStorage.setItem(&quot;key&quot;,&quot;value&quot;);//以“key”为名称存储一个值“value”localStorage.getItem(&quot;key&quot;);//获取名称为“key”的值列举localStorage的方法：for(var i=0;i&lt;localStorage.length;i++)&#123; var name = localStorage.key(i); var value = localStorage.getItem(name);&#125;删除localStorage中存储信息的方法：localStorage.removeItem(&quot;key&quot;);//删除名称为“key”的信息。localStorage.clear();//清空localStorage中所有信息]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>本地存储</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery操作]]></title>
    <url>%2F2017%2F09%2F21%2FjQuery_Class%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[jQuery操作CSS操作 功能：设置或者修改样式，操作的是style属性。 操作单个样式 12345// name：需要设置的样式名称// value：对应的样式值$obj.css(name, value);// 使用案例$('#one').css('background','gray');// 将背景色修改为灰色 设置多个样式 12345678// 参数是一个对象，对象中包含了需要设置的样式名和样式值$obj.css(obj);// 使用案例$('#one').css(&#123; 'background':'gray', 'width':'400px', 'height':'200px'&#125;); 获取样式 1234// name:需要获取的样式名称$obj.css(name);// 案例$('div').css('background-color'); 注意：获取样式操作只会返回第一个元素对应的样式值。 隐式迭代： 设置操作的时候，如果是多个元素，那么给所有的元素设置相同的值 获取操作的时候，如果是多个元素，那么只会返回第一个元素的值。 class操作 添加样式类 1234// name：需要添加的样式类名，注意参数不要带点.$obj.addClass(name);// 例子,给所有的div添加one的样式。$('div').addClass('one'); 移除样式类 1234// name:需要移除的样式类名$obj.removeClass('name');// 例子，移除div中one的样式类名$('div').removeClass('one'); 判断是否有某个样式类 1234// name:用于判断的样式类名，返回值为true false$obj.hasClass(name)// 例子，判断第一个div是否有one的样式类$('div').hasClass('one'); 切换样式类 1234// name:需要切换的样式类名，如果有，移除该样式，如果没有，添加该样式。$obj.toggleClass(name);// 例子$('div').toggleClass('one'); jQuery节点操作创建节点123// $(htmlStr)// htmlStr：html格式的字符串$('&lt;span-这是一个span元素&lt;/span-'); 添加节点1234append appendTo 在被选元素的结尾插入内容prepend prependTo 在被选元素的开头插入内容before 在被选元素之后插入内容after 在被选元素之前插入内容 清空节点与删除节点 empty：清空指定节点的所有元素，自身保留(清理门户) 12$('div').empty(); // 清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）$('div').html('');// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。 remove：相比于empty，自身也删除（自杀） 1$('div').remove(); 克隆节点 作用：复制匹配的元素 1234// 复制$(selector)所匹配到的元素（深度复制）// cloneNode(true)// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。$(selector).clone(); jQuery操作属性attr操作 设置单个属性 123456// 第一个参数：需要设置的属性名// 第二个参数：对应的属性值$obj.attr(name, value);// 用法举例$('img').attr('title','哎哟，不错哦');$('img').attr('alt','哎哟，不错哦'); 设置多个属性 12345678// 参数是一个对象，包含了需要设置的属性名和属性值$obj.attr(obj)// 用法举例$('img').attr(&#123; title:'哎哟，不错哦', alt:'哎哟，不错哦', style:'opacity:.5'&#125;); 获取属性 12345// 传需要获取的属性名称，返回对应的属性值$obj.attr(name)// 用法举例var oTitle = $('img').attr('title');alert(oTitle); 移除属性 1234// 参数：需要移除的属性名，$obj.removeAttr(name);// 用法举例$('img').removeAttr('title'); prop操作 在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。 1234// 设置属性$(':checked').prop('checked',true);// 获取属性$(':checked').prop('checked');// 返回true或者false val()/text/()html()123$obj.val() 获取或者设置表单元素的value属性的值$obj.html() 对应innerHTML$obj.text() 对应innerText/textContent，处理了浏览器的兼容性 jQuery尺寸和位置操作width方法与height方法 设置或者获取高度，不包括内边距、边框和外边距 1234// 带参数表示设置高度$('img').height(200);// 不带参数获取高度$('img').height(); 获取网页的可视区宽高 1234// 获取可视区宽度$(window).width();// 获取可视区高度$(window).height(); innerWidth/innerHeight/outerWidth/outerHeight123innerWidth()/innerHeight() 方法返回元素的宽度/高度（包括内边距）。outerWidth()/outerHeight() 方法返回元素的宽度/高度（包括内边距和边框）。outerWidth(true)/outerHeight(true) 方法返回元素的宽度/高度（包括内边距、边框和外边距）。 scrollTop与scrollLeft 设置或者获取垂直滚动条的位置 1234// 获取页面被卷曲的高度$(window).scrollTop();// 获取页面被卷曲的宽度$(window).scrollLeft(); offset方法与position方法 offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(offsetParent)的位置。 1234// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;$(selector).offset();// 获取相对于其最近的有定位的父元素的位置。$(selector).position();]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery操作元素</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP数据库简单操作]]></title>
    <url>%2F2017%2F09%2F21%2FPHP%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[数据库操作方式 图形界面客户端 创建连接 创建数据库 删除数据库 创建表 编辑表 删除表 表结构分析 数据类型分析 数据增删改查操作 SQL SQL基本概述 插入数据insert 12-- insert into 表名 (字段列表) values (值列表)insert into book (name,author,category,price) values ('天龙八部','金庸','文学',20) 修改数据update 12-- update 表名 set 字段名称1=值1,字段名称2=值2,... where 条件update book set name='笑傲江湖',price='30' where id=10 删除数据delete 12-- delete from 表名 where 条件delete from book where id=10 查询数据select 12-- select * from 表名 where 条件select * from book where author='金庸' and price&gt;20 简单的联表查询 1select u.username,b.name from user u,book b where u.id=b.uid and b.price&gt;20 PHP代码操作数据 连接数据库基本步骤 12345678910111213141516171819// 1、连接数据库$server = 'localhost';//数据库所在计算机的域名或者IP地址$username = 'root';//登录数据库的用户名$pw = '';//登录数据库的密码// 执行连接操作$link = mysql_connect($server,$username,$pw);// 2、选择要操作哪个数据库mysql_select_db('hello',$link);// 3、设置查询编码mysql_query("SET names UTF8");// 4、操作数据（通过sql语句操作数据库）$str = 'select count(*) as cc from user';$result = mysql_query($str);// 5、获取数据库的结果集并解析$row = mysql_fetch_assoc($result);echo $row['cc'];// 6、释放资源并关闭数据库mysql_free_result($result);mysql_close($link); 数据库操作常用api mysql_connect() 连接数据库 mysql_select_db() 选择数据库 mysql_query() 执SQL语句 mysql_fetch_row() 以索引数组的形式返回结果 mysql_fetch_assoc() 以关联数组的形式范湖数据 mysql_fetch_array() 返回索引数组和关联数组 mysql_fetch_object() 以对象形式返回结果 mysql_free_result() 释放资源 mysql_close() 关闭连接 基本增删改查操作]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP-数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery选择器]]></title>
    <url>%2F2017%2F06%2F21%2FjQuery%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[选择器jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。 jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。（查看jQuery文档） jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。 jQuery基本选择器 名称 用法 描述 ID选择器 $(‘#id’); 获取指定ID的元素 类选择器 $(‘.class’); 获取同一类class的元素 标签选择器 $(‘div’); 获取同一类标签的所有元素 并集选择器 $(‘div,p,li’); 使用逗号分隔，只要符合条件之一就可。 交集选择器 $(‘div.redClass’); 获取class为redClass的div元素 总结：跟css的选择器用法一模一样。 jQuery层级选择器 名称 用法 描述 子代选择器 $(‘ul &gt; li’); 使用-号，获取儿子层级的元素，注意，并不会获取孙子层级的元素 后代选择器 $(‘ul li’); 使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等 跟CSS的选择器一模一样。 jQuery过滤选择器 这类选择器都带冒号: 名称 用法 描述 :eq（index） $(‘li:eq(2)’).css(‘color’, ‘red’); 获取到的li元素中，选择索引号为2的元素，索引号index从0开始。 :odd $(‘li:odd’).css(‘color’, ‘red’); 获取到的li元素中，选择索引号为奇数的元素 :even $(‘li:even’).css(‘color’, ‘red’); 获取到的li元素中，选择索引号为偶数的元素 jQuery筛选选择器(方法) 筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。 名称 用法 描述 children(selector) $(‘ul’).children(‘li’) 相当于$(‘ul-li’)，子类选择器 find(selector) $(‘ul’).find(‘li’); 相当于$(‘ul li’),后代选择器 siblings(selector) $(‘#first’).siblings(‘li’); 查找兄弟节点，不包括自己本身。 parent() $(‘#first’).parent(); 查找父亲 eq(index) $(‘li’).eq(2); 相当于$(‘li:eq(2)’),index从0开始 next() $(‘li’).next() 找下一个兄弟 prev() $(‘li’).prev() 找上一次兄弟]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery选择器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js贪吃蛇]]></title>
    <url>%2F2017%2F05%2F28%2F%E7%AE%80%E6%98%93%E8%B4%AA%E5%90%83%E8%9B%87%2F</url>
    <content type="text"><![CDATA[简易贪吃蛇项目分析 原理：我只要找一个对象，当我调用它开始游戏的方法，那么游戏就开始了。但是现在没有这样的对象，所以我们要封装这个对象，相当于是一个游戏管家。 确定开发步骤 写一个div到body里，当地图，设置样式宽和高、背景颜色、相对定位 创建食物 创建蛇 把食物和蛇单独封装到各自的一个文件 创建一个游戏管家类 用户按上下左右让蛇跟着动 判断越界 判断吃食物 创建地图模板1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=&quot;en&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; #map &#123; width: 600px; height: 600px; background-color: #cccccc; position: relative; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;food.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;snake.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;Game.js&quot;&gt;&lt;/script&gt;&lt;script&gt;//找到地图var map = document.getElementById(&quot;map&quot;);//实例化游戏管家对象var gm = new Game();gm.startGame(map);&lt;/script&gt; 创建食物1234567891011121314151617181920212223242526272829303132333435363738function Food(x, y, w, h, color) &#123; this.x = x || 0; this.y = y || 0; this.width = w || 20; this.height = h || 20; this.color = color || &quot;green&quot;;&#125;var lastFood;//把食物渲染出来Food.prototype.render = function (map) &#123;if (lastFood) &#123; //先把上一次的食物清掉 map.removeChild(lastFood);&#125; //用地图的宽除以食物的宽得到最大可以放多少列 var col = map.offsetWidth / this.width; this.x = Math.floor((Math.random() * col)) * this.width; var row = map.offsetHeight / this.height; this.y = Math.floor(Math.random() * row) * this.height; //创建div var div = document.createElement(&quot;div&quot;); div.style.position = &quot;absolute&quot;; div.style.left = this.x + &quot;px&quot;; div.style.top = this.y + &quot;px&quot;; div.style.width = this.width + &quot;px&quot;; div.style.height = this.height + &quot;px&quot;; div.style.backgroundColor = this.color; lastFood = div; map.appendChild(div); &#125; 创建蛇对象//保存上一次渲染生成的div var list = []; //因为蛇是对象，所以给它一个构造函数 function Snake(bodyW, bodyH, direction) { //宽和高，只要用一个属性保存 this.bodyW = bodyW || 20; this.bodyH = bodyH || 20; //这里可以设置蛇默认的方向 this.direction = direction || &quot;right&quot;; //蛇有身体，身体由数组组成（因为默认有3节身体，后面吃了食物还要能长身体（相当于给数组加一个元素）） this.body = [ {x: 3, y: 1, color: &quot;red&quot;}, {x: 2, y: 1, color: &quot;seagreen&quot;}, {x: 1, y: 1, color: &quot;seagreen&quot;}, ]; } Snake.prototype.render = function (map) { //先删除上一次渲染出来的div for (var i = 0; i &lt; list.length; i++) { map.removeChild(list[i]); } //内存中也要把这些div清楚掉 list = []; //body里有多少个元素，就创建多少个div for (var i = 0; i &lt; this.body.length; i++) { var div = document.createElement(&quot;div&quot;); div.style.position = &quot;absolute&quot;; div.style.left = this.body[i].x * this.bodyW + &quot;px&quot;; div.style.top = this.body[i].y * this.bodyH + &quot;px&quot;; div.style.width = this.bodyW + &quot;px&quot;; div.style.height = this.bodyH + &quot;px&quot;; div.style.backgroundColor = this.body[i].color; //把每次创建的div保存起来 list.push(div); map.appendChild(div); } } //移动是蛇的行为，所以给蛇对象加一个移动的方法 Snake.prototype.move = function () { //蛇身体移动，它前一个位置是多少，它就移动到多少 //从后到前遍历会更好，因为这样的话前一个身体还没动过位置可以拿到这个位置 //注意：不要包括0，因为0是蛇头，而蛇头没有前一个身体，是要单独根据方向来定 for (var i = this.body.length - 1; i &gt; 0; i--) { this.body[i].x = this.body[i - 1].x; this.body[i].y = this.body[i - 1].y; } //蛇头移动根据方向来 switch (this.direction) { case &quot;up&quot;: this.body[0].y--; break; case &quot;down&quot;: this.body[0].y++; break; case &quot;left&quot;: this.body[0].x--; break; case &quot;right&quot;: this.body[0].x++; break; } } 创建一个游戏管家类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117var that;function Game() &#123; //把游戏管理者对象保存起来，保存在that that = this; //管理蛇对象 this.snake = new Snake(); //管理食物对象 this.food = new Food();&#125;function bindKey() &#123; //document.onkeypress;//不包括功能键 document.onkeydown = function (e) &#123; e = e || window.event; var code = e.keyCode || e.charCode || e.which; //37左 38上 39右 40下 switch (code) &#123; case 37: if (that.snake.direction != &quot;right&quot;) that.snake.direction = &quot;left&quot;; break; case 38: if (that.snake.direction != &quot;down&quot;) that.snake.direction = &quot;up&quot;; break; case 39: if (that.snake.direction != &quot;left&quot;) that.snake.direction = &quot;right&quot;; break; case 40: if (that.snake.direction != &quot;up&quot;) that.snake.direction = &quot;down&quot;; break; &#125; &#125;&#125;//开始游戏Game.prototype.startGame = function (map) &#123; //开始游戏时就需要监听网页用户按下的键 bindKey(); //要把食物画出来 this.food.render(map); //把蛇画出来 this.snake.render(map); //蛇自己自动 autoMove();&#125;function autoMove() &#123; var timerID = setInterval(function () &#123; //保存移动之前最后一格的身体坐标（为了如果移动后吃到食物了，这个坐标就给新添加的身体） var oldX = that.snake.body[that.snake.body.length - 1].x; var oldY = that.snake.body[that.snake.body.length - 1].y; //让蛇自己动 that.snake.move(); //判断是否越界 //如果水平方向一行只能放20个，意味着蛇头的x如果大于等于20就越界 var maxCol = map.offsetWidth / that.snake.bodyW; var maxRow = map.offsetHeight / that.snake.bodyH; var head = that.snake.body[0]; if (head.x &gt;= maxCol || head.x &lt; 0 || head.y &lt; 0 || head.y &gt;= maxRow) &#123; alert(&quot;Game Over!&quot;); clearInterval(timerID); return; &#125; //判断有没有吃到食物：思路：蛇头的坐标如果和食物的坐标重合就代表吃到了 //先计算出蛇头真正left值 var x = head.x * that.snake.bodyW; //再计算蛇头真正的top值 var y = head.y * that.snake.bodyH; //判断是否迟到食物 if (x == that.food.x &amp;&amp; y == that.food.y) &#123; //让蛇加一节身体 that.snake.body.push( &#123;x: oldX, y: oldY, color: &quot;seagreen&quot;&#125; ) //让食物重新生成（渲染）它内部每次渲染之前都清除原来的了 that.food.render(map); &#125; //让你根据最新位置渲染 that.snake.render(map); &#125;, 180);&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Canvas小鸟游戏]]></title>
    <url>%2F2017%2F02%2F08%2F%E7%AC%A8%E7%AC%A8%E7%9A%84%E5%B0%8F%E9%B8%9F%2F</url>
    <content type="text"><![CDATA[FlapyBird游戏实现项目需要分析 天空背景是连续水平滚动的 地面背景是连续水平滚动的 管道背景是连续水平滚动的，管道的高度随机，管道充当小鸟飞行的障碍物 小鸟总是在做自由落体运动，点击会给他一个向上的速度，小鸟飞行中在扇动翅膀，小鸟上飞和下落时仰角会发生变化 小鸟掉到地上，或者撞到柱子上，则游戏结束 需要在右上角显示游戏持续的时间 项目实现分析 原理： 动画效果，其实就像是连环画， 每一帧，就相当于一张连环画。当播放连环画的速度极快，超过每秒24张每秒时，人的肉眼就会认会它是连续的动画效果。所有的视频播放原理都是这样的。 愤怒的小鸟这个demo中，每一帧，就相当于连环画的单张画面，每一张画面上，拥有的元素都是一样的，比如小鸟、天空、地面、管道。 但是在每一张连环画上， 元素的位置不一样，当前帧的元素的状态和位置，在是上一帧的元素的状态和位置基础上重新计算的 我们可以先把画一张连环画的效果实现，现用一个系统动画，画面就会动起来了，每次执行动画时，就相当于是先把画布清空，画一张新的画面上去 确定开发步骤 创建绘图模板 加载图片元素 天空背景实现 陆地背景实现 管道实现 小鸟实现 实现碰撞判断 时间统计实现 创建绘图模板 代码很简单 123456789101112131415161718192021&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #canvas &#123; border: 1px solid #000; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;canvas width="800" height="600" id="canvas"&gt;&lt;/canvas&gt;&lt;script&gt; var canvas = document.getElementById("canvas"); var ctx = canvas.getContext("2d");&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 加载图片元素 先用图片名，加载图片，并生成图片对象。所有的资源图片加载成功之后，才能运行游戏 代码 1234567891011121314151617181920212223function loadImage(imgNameList, callBack) &#123; //所有图片对象 var imageArr = &#123;&#125;; //计数，每加载完一张图片后，计数加1 var count = 0; //使用for循环加载所有图片 for (var i = 0; i &lt; imgNameList.length; i++) &#123; //创建一张图片，并保存到图片数组对象中 var image = new Image(); image.src = "imgs/" + imgNameList[i] + ".png"; imageArr[imgNameList[i]] = image; //当计数和imgNameList的长度一致时，代表所有图片都加载完成了 image.onload = function () &#123; count++; if (count == imgNameList.length) &#123; //完成回调（加载完图片之后，要做的事情） callBack(imageArr); &#125; &#125; &#125;&#125; 天空背景实现 天空，把两张天空拼在一起，不断修改这两张天空在画布的位置；当左边的天空滚出画布时，拼到第二张画布的后面重新画 代码 1234567891011121314151617181920function Sky (drawInfo) &#123; this.ctx = drawInfo.ctx; this.image = drawInfo.image; this.x = drawInfo.x; this.speed = 2;&#125;Sky.prototype = &#123; constructor: Sky, draw: function () &#123; //绘制天空 this.ctx.drawImage(this.image, this.x, 0, this.image.width, this.image.height); //移动坐标 this.x -= this.speed; if (this.x &lt; - this.image.width) &#123; this.x += 2 * this.image.width; &#125; &#125;&#125; 陆地背景实现 地面，和天空的原理是一样的，不同的是四张地面拼在一起 代码 123456789101112131415161718192021function Land (drawInfo) &#123; this.ctx = drawInfo.ctx; this.image = drawInfo.image; this.x = drawInfo.x; this.y = drawInfo.y; this.speed = 2;&#125;Land.prototype = &#123; constructor: Land, draw: function () &#123; //绘制天空 this.ctx.drawImage(this.image, this.x, this.y, this.image.width, this.image.height); //移动坐标 this.x -= this.speed; if (this.x &lt; - this.image.width) &#123; this.x += 4 * this.image.width; &#125; &#125;&#125; 管道实现 管道，管道是六组拼在一起，不断调整它们的位置，需要注意的是 我们同时还要计算管道的垂直方向的位置，因为管道的高度是随机的 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344function Pipe (drawInfo) &#123; this.ctx = drawInfo.ctx; this.topImage = drawInfo.topImage; this.bottomImage = drawInfo.bottomImage; this.x = drawInfo.x; this.bottom = drawInfo.bottom; this.space = drawInfo.space; this.gap = drawInfo.gap; this.speed = 2; this.canvasWidth = drawInfo.canvasWidth; this.canvasHeight = drawInfo.canvasHeight; this.topPipeHeight = 0; this.bottomPipeHeight = 0; //先计算高度 this.initHeight()&#125;Pipe.prototype = &#123; constructor: Pipe, draw: function () &#123; //画上面的管道 this.ctx.drawImage(this.topImage, this.x, 0, this.topImage.width, this.topPipeHeight); //画下面的管道 this.ctx.drawImage(this.bottomImage, this.x, this.topPipeHeight + this.space, this.topImage.width, this.bottomPipeHeight); //画两个方形 ctx.rect(this.x, 0, this.topImage.width, this.topPipeHeight); ctx.rect(this.x, this.topPipeHeight + this.space, this.topImage.width, this.bottomPipeHeight); //移动坐标 this.x -= this.speed; if (this.x &lt; - this.topImage.width) &#123; this.x = this.canvasWidth - this.topImage.width + this.gap; this.initHeight(); console.log(this.topPipeHeight); &#125; &#125;, initHeight: function() &#123; //随机计算高度 this.topPipeHeight = Math.random() * 200 + 100; this.bottomPipeHeight = this.canvasHeight-this.topPipeHeight-this.space-this.bottom; &#125;&#125; 小鸟实现 小鸟（三种状态）， 翅膀在下面，翅膀在中间，翅膀在下面，执行第一次动画时，用翅膀在上面的图片，插放第二张时，用翅膀在中间的图片; 播放第三张图片时，用翅膀在下面的图片，如果循环，小乌就动起来了 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546function Bird (drawInfo) &#123; this.ctx = drawInfo.ctx; this.image = drawInfo.image; this.width = this.image.width/3; this.height = this.image.height; this.x = drawInfo.x; this.y = drawInfo.y; this.index = 0; this.speed = 0; this.aspeed = 0.0004; this.maxSpeed = 0.3; this.masAngle = 45;&#125;Bird.prototype = &#123; constructor: Bird, draw: function (deltaTime) &#123; //计算小鸟当前的位置 //改变后的速度 this.speed = this.speed + this.aspeed * deltaTime; //改变后的位移位置 this.y += this.speed * deltaTime + this.aspeed*deltaTime*deltaTime/2; //保存状态 ctx.save() //小鸟要以自己为中心旋转，所以要把参照原点改成自己 ctx.translate(this.x + this.width/2, this.y + this.height/2) //公式：当前速度/最大速度 = 当前角度/最大角度 var currenAngle = this.masAngle * this.speed / this.maxSpeed; ctx.rotate(this.angleToRadian(currenAngle)); //绘制小鸟（9参模型，中间四个，图片的切片位置和大小，后面四个，图片的绘制位置和大小） this.index += 1; this.ctx.drawImage(this.image, this.width*(this.index%3), 0, this.width, this.height, -this.width/2, -this.height/2, this.width, this.height ); ctx.restore(); &#125;, angleToRadian: function (angle) &#123; return angle / 180 * Math.PI; &#125;&#125; 实现碰撞判断 碰撞判断的原理：就是判断小鸟的坐标是否超出了画布的边缘，或者是否在管道的路径之内 判断是否超出了画布的边缘 1234//小鸟超出了画布了if(ctx.isPointInPath(bird.x + bird.width / 2, bird.y + bird.height /2))&#123; isDie = true;&#125; 判断是否在管道的路径之内 先把管道的路径绘制出来(pipe.js) 123//画两个方形 ctx.rect(this.x, 0, this.topImage.width, this.topPipeHeight); ctx.rect(this.x, this.topPipeHeight + this.space, this.topImage.width, this.bottomPipeHeight); 判断（flapyBird.html） 123if(ctx.isPointInPath(bird.x + bird.width / 2, bird.y + bird.height /2))&#123; isDie = true; &#125; 时间统计实现 获得累时间,用一下变量记录每播放一帧动画的时间(currentTime)，减去上次播放动画的时间(oldTime)，即为此帧与上一帧之间的时间差(deltaTime)；计算完时间差后，当前帧时间相对于下一帧，就变成了上一帧的时间（oldTime） 1234//计算时间currentTime = new Date();var deltaTime = currentTime - lastTime;lastTime = currentTime; 计算时分秒、位置、并且开始执行绘制操作 12345678910111213//计算时分秒totalTime += deltaTime;var seconds = Math.floor(totalTime/1000);var hour = Math.floor(seconds/3600);var minute = Math.floor(seconds%3600/60);var second = Math.floor(seconds%60);//获取文字及长度var text = "您坚持了"+hour+"小时"+minute+"分"+second+"秒"var textwh = ctx.measureText(text);//文字绘制ctx.fillText(text, canvas.width - textwh.width - 20, 20);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端性能优化总结]]></title>
    <url>%2F2016%2F12%2F23%2F%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[性能优化总结1. 减少http请求​ 减少http的主要手段是合并CSS、合并javascript、合并图片。将浏览器一次访问需要的javascript和CSS合并成一个文件，这样浏览器就只需要一次请求。图片也可以合并，多张图片合并成一张。如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标点击操作，构造不同的URL。 2. 使用浏览器缓存​ 对一个网站而言，CSS、javascript、logo、图标这些静态资源文件更新的频率都比较低，而这些文件又几乎是每次http请求都需要的，如果将这些文件缓存在浏览器中，可以极好的改善性能。 ​ 可以使用localStorage来存储数据。 3. CSS放在页面最上部，javascript放在页面最下面​ 浏览器会在下载完成全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。 ​ Javascript则相反，浏览器在加载javascript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此javascript最好放在页面最下面。但如果页面解析时就需要用到javascript，这时放到底部就不合适了，不过这时候可以写入口函数，让这段js代码在程序运行最开始调用。 3. 避免页面跳转​ 可以使用ajax进行无刷新和后台交互，利用js来发送请求报文。阻止a标签默认事件。 4. 对图片进行优化 图片懒加载 小图片可以做成精灵图，或字体图标 加载完成前先准备一张压缩的特别厉害的缩略图，提高用户体验 如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。 ​]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端向后台发送请求的几种方式]]></title>
    <url>%2F2016%2F11%2F12%2F%E5%89%8D%E7%AB%AF%E5%90%91%E5%90%8E%E5%8F%B0%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[前端向后台发送请求的几种方式1、 link标签的href属性 2、 script标签的src属性 3、 img标签的src属性 4、 ajax发送请求 5、 表单提交发送请求 6、 a标签的href发送请求 7、 iframe的src属性发送请求]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>发送请求</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css高清背景图]]></title>
    <url>%2F2016%2F07%2F18%2Fcss%E9%AB%98%E6%B8%85%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[CSS高清背景图说明 现在的手机普遍使用的都是高清图，也就意味着屏幕有两个宽度 css的像素的宽度： 在开发过程中，布局直接使用的宽度 手机硬件的分辨率的宽度，一般情况下和CSS的宽度是一致的，但是近几年，都流行高清屏，硬件的宽度一般是css宽度的2倍或3倍，这个时候就需要使用高清图片 在前端开发的时候，一般使用一个2倍图就可以了 使用 假如我们使用的就是一个小图标： 那么只需要把 background-size 设为图片本身的一半，就可以了 ´background: url(“./images/im_2x.png”) no-repeat 0px 0px /57px 21px; 如果使用的是精灵图： 那么要做的事情 把background-position:x y; 设为它本来在精灵的位置的一半。 把background-size 也设为图片本身宽度的一半。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[border边框]]></title>
    <url>%2F2016%2F07%2F18%2Fborder%E8%BE%B9%E6%A1%86%2F</url>
    <content type="text"><![CDATA[hover 加边框 当给border加上鼠标移入加边框事件 hover 时，会发现边框会改变原本的盒子大小，但是这个时候加上box-sizing:border-box;也并没有效果。 解决方案在原本的盒子模型中预先加上一个边框，并设置其颜色为透明即可，当做占位符。这样在后续给盒子添加鼠标移入加边框时就不会出现改变盒子模型的情况了 border:1px solid transparent;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>边框</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GET和POST]]></title>
    <url>%2F2016%2F07%2F18%2Fget%E5%92%8Cpost%2F</url>
    <content type="text"><![CDATA[GET和POST的区别 get主要用于从服务器查询数据，post用于向服务器提交数据 get通过URL传递数据，post通过http请求传递数据 get传输数据量有限制，不能大于2kb,post传递的数据量较大，一般大量的数据和文件提交都是通过Post方式 get 安全性较低。容易在url中暴露数据，post安全性较高 有关 GET 请求的其他一些注释： GET 请求可被缓存 GET 请求保留在浏览器历史记录中 GET 请求可被收藏为书签 GET 请求不应在处理敏感数据时使用 GET 请求有长度限制 GET 请求只应当用于取回数据 有关 POST 请求的其他一些注释： POST 请求不会被缓存 POST 请求不会保留在浏览器历史记录中 POST 不能被收藏为书签 POST 请求对数据长度没有要求]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
</search>
