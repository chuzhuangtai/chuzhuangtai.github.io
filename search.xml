<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos升级Python 2.7.12并安装最新pip]]></title>
    <url>%2F2018%2F03%2F06%2FCentos%E5%8D%87%E7%BA%A7Python%202.7.12%E5%B9%B6%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0pip%2F</url>
    <content type="text"><![CDATA[Centos升级Python 2.7.12并安装最新pipCentos系统一般默认就安装有Python2.6.6版本，不少软件需要2.7以上的，通过包管理工具安装不了最新的版本，通过源码编译可以方便安装指定版本，只需要把下面版本的数字换成你想要的版本号。 1.安装步骤下载源码 wget http://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz 在下载目录解压源码 tar -zxvf Python-2.7.12.tgz 进入解压后的文件夹 cd Python-2.7.12 在编译前先在/usr/local建一个文件夹python2.7.12（作为python的安装路径，以免覆盖老的版本，新旧版本可以共存的) mkdir /usr/local/python2.7.12 ，编译前需要安装下面依赖，否则下面安装pip就会出错 yum install openssl openssl-devel zlib-devel gcc -y 安装完依赖后执行下面命令 vim ./Modules/Setup 找到#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz去掉注释并保存(即去掉井号) 在解压缩后的目录下编译安装 123./configure --prefix=/usr/local/python2.7.12 --with-zlibmake make install 此时没有覆盖老版本，再将原来/usr/bin/python链接改为别的名字 mv /usr/bin/python /usr/bin/python2.6.6 再建立新版本python的软链接 ln -s /usr/local/python2.7.12/bin/python2.7 /usr/bin/python 这个时候输入 python 就会显示出python的新版本信息 123Python 2.7.12 (default, Oct 13 2016, 03:17:14) [GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux2Type “help”, “copyright”, “credits” or “license” for more information. 2.修改yum配置文件之所以要保留旧版本，因为yum依赖Python2.6，改下yum的配置文件，指定旧的Python版本就可以了。 vim /usr/bin/yum， 将第一行的#!/usr/bin/python修改成#!/usr/bin/python2.6.6 3.安装最新版本的pipwget https://bootstrap.pypa.io/get-pip.py python get-pip.py 找到pip2.7的路径 find / -name &quot;pip*&quot; 上面的命令输出 /root/.cache/pip 这里省略一堆输出 123456/usr/local/python2.7.12/bin/pip/usr/local/python2.7.12/bin/pip2/usr/local/python2.7.12/bin/pip2.7 #就是这个/usr/bin/pip/usr/bin/pip2/usr/bin/pip2.6 为其创建软链作为系统默认的启动版本（之前有旧版本的话就先删掉rm -rf /usr/bin/pip） ln -s /usr/local/python2.7.12/bin/pip2.7 /usr/bin/pip 看下pip的版本 pip -V 1pip 8.1.2 from /usr/local/python2.7.12/lib/python2.7/site-packages (python 2.7) pip安装完毕，现在可以用它下载安装各种包了 我把上面的所有写成下面简单的脚本，一键就可以升级好。 wget http://7xpt4s.com1.z0.glb.clouddn.com/update-python2.7.12.sh &amp;&amp; bash update-python2.7.12.sh 参考： https://ruter.github.io/2015/12/03/Update-python/ https://blog.phpgao.com/pip-easy_install-setuptool.html 原文地址：https://blog.fazero.me/2016/10/13/centos-update-python/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActiveMQ]]></title>
    <url>%2F2018%2F03%2F06%2FActiveMQ%2F</url>
    <content type="text"><![CDATA[ActiveMQ简单的示例下载ActiveMQ 去官方网站下载：http://activemq.apache.org/ 运行ActiveMQ 解压缩apache-activemq-5.9.0-bin.zip， 修改配置文件activeMQ.xml，将0.0.0.0修改为localhost 123456789&lt;transportConnector name="openwire" uri="tcp://localhost:61616"/&gt;&lt;transportConnector name="ssl" uri="ssl://localhost:61617"/&gt;&lt;transportConnector name="stomp" uri="stomp://localhost:61613"/&gt;&lt;transportConnector uri="http://localhost:8081"/&gt;&lt;transportConnector uri="udp://localhost:61618"/&gt; 然后双击apache-activemq-5.9.0\bin\activemq.bat运行ActiveMQ程序。 启动ActiveMQ以后，登陆：http://localhost:8161/admin/ 账号密码：admin 创建一个Queue，命名为FirstQueue。 点对点 即一个生产者和一个消费者一一对应 producer生产者12345678910111213141516171819202122232425262728293031323334public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory，需要ip和端口61616 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://192.168.37.161:61616"); // 2. 从连接工厂中创建连接对象 Connection connection = factory.createConnection(); // 3. 执行start方法开启连接 connection.start(); // 4. 从连接中创建session对象 // 第一个参数，是否开启事务，JTA分布式事务 // 第二个参数，是否自动应答，如果第一个参数为true，第二个参数失效 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session中创建Destination对象，设置queue名称（有两种类型queue和topic） Queue queue = session.createQueue("test-queue"); // 6. 从session中创建Product对象 MessageProducer producer = session.createProducer(queue); // 7. 创建消息对象 TextMessage textMessage = new ActiveMQTextMessage(); // 设置消息内容 textMessage.setText("开始发消息！"); // 8. 发送消息 producer.send(textMessage); // 9. 关闭session、连接 producer.close(); session.close(); connection.close(); &#125; consumer消费者 直接获取消息 123456789101112131415161718192021222324252627282930313233343536373839404142public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory，需要ip和端口61616 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://192.168.37.161:61616"); // 2. 使用工厂创建连接 Connection connection = factory.createConnection(); // 3. 使用start开启连接 connection.start(); // 4. 从连接中创建session对象 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session中创建Destination对象，设置queue名字 Queue queue = session.createQueue("test-queue"); // 6. 从session中创建Consumer MessageConsumer consumer = session.createConsumer(queue); // 7， 接收消息,直接获取 while (true) &#123; // 消息超时时间是20秒 Message message = consumer.receive(20000); // 如果消息为空，则跳出死循环 if (message == null) &#123; break; &#125; // 8. 打印消息 if (message instanceof TextMessage) &#123; // 获取消息 TextMessage textMessage = (TextMessage) message; // 打印 System.out.println(textMessage.getText()); &#125; &#125; // 9. 关闭session、连接等 consumer.close(); session.close(); connection.close(); &#125; ​ 使用监听器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory，需要ip和端口61616 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://192.168.37.161:61616"); // 2. 使用工厂创建连接 Connection connection = factory.createConnection(); // 3. 使用start开启连接 connection.start(); // 4. 从连接中创建session对象 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session中创建Destination对象，设置queue名字 Queue queue = session.createQueue("test-queue"); // 6. 从session中创建Consumer MessageConsumer consumer = session.createConsumer(queue); // // 7， 接收消息,直接获取 // while (true) &#123; // // 消息超时时间是20秒 // Message message = consumer.receive(20000); // // 如果消息为空，则跳出死循环 // if (message == null) &#123; // break; // &#125; // // // 8. 打印消息 // if (true) &#123; // if (message instanceof TextMessage) &#123; // // 获取消息 // TextMessage textMessage = (TextMessage) message; // // 打印 // System.out.println(textMessage.getText()); // &#125; // &#125; // &#125; // 7.接收消息 // 监听器的方式实际上是开启了一个新的线程，专门处理消息的接受 // 现在的情况是，主线程执行完就结束了，新的线程也跟着没了 consumer.setMessageListener(new MessageListener() &#123; @Override public void onMessage(Message message) &#123; if (message instanceof TextMessage) &#123; // 获取消息 TextMessage textMessage = (TextMessage) message; try &#123; // 打印 System.out.println(textMessage.getText()); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125;); // 让主线程等待一会，监听器能够有时间执行 Thread.sleep(10000); // 9. 关闭session、连接等 consumer.close(); session.close(); connection.close(); &#125; ​ 发布/订阅模式 即一个生产者产生消息并进行发送后，可以由多个消费者进行接收。 producer生产者12345678910111213141516171819202122232425262728293031323334public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory( "tcp://192.168.37.161:61616"); // 2. 使用工厂创建连接 Connection connection = activeMQConnectionFactory.createConnection(); // 3. 使用start方法开启连接 connection.start(); // 4. 从连接创建session Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session创建Destination对象，设置topic名称 Topic topic = session.createTopic("test-topic"); // 6. 从session创建Product MessageProducer producer = session.createProducer(topic); // 7. 创建消息对象 TextMessage textMessage = new ActiveMQTextMessage(); textMessage.setText("topic消息"); // 8. 发送消息 producer.send(textMessage); // 9. 关闭session、连接等 producer.close(); session.close(); connection.close(); &#125;&#125; consumer消费者 consumer1 1234567891011121314151617181920212223242526272829303132333435363738394041public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory( "tcp://192.168.37.161:61616"); // 2. 从连接工厂创建连接 Connection connection = activeMQConnectionFactory.createConnection(); // 3. 使用start方法开启连接 connection.start(); // 4. 从连接创建session对象 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session创建安Destination，设置topic名称 Topic topic = session.createTopic("test-topic"); // 6. 从session创建Consumer对象 MessageConsumer consumer = session.createConsumer(topic); // 7. 接收消息，直接接受 while (true) &#123; Message message = consumer.receive(20000); if (message == null) &#123; break; &#125; if (message instanceof TextMessage) &#123; TextMessage textMessage = (TextMessage) message; // 8. 打印消息 System.out.println(textMessage.getText()); &#125; &#125; // 9. 关闭session、消息等 consumer.close(); session.close(); connection.close(); &#125; consumer2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public static void main(String[] args) throws Exception &#123; // 1. 创建连接工厂ActiveMQConnectionFactory ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory( "tcp://192.168.37.161:61616"); // 2. 从连接工厂创建连接 Connection connection = activeMQConnectionFactory.createConnection(); // 3. 使用start方法开启连接 connection.start(); // 4. 从连接创建session对象 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); // 5. 从session创建安Destination，设置topic名称 Topic topic = session.createTopic("test-topic"); // 6. 从session创建Consumer对象 MessageConsumer consumer = session.createConsumer(topic); // 7. 接收消息，直接接受 // while (true) &#123; // Message message = consumer.receive(20000); // // if (message == null) &#123; // break; // &#125; // // if (message instanceof TextMessage) &#123; // TextMessage textMessage = (TextMessage) message; // // 8. 打印消息 // System.out.println(textMessage.getText()); // &#125; // &#125; // 7.接受消息，使用监听器 consumer.setMessageListener(new MessageListener() &#123; @Override public void onMessage(Message message) &#123; if (message instanceof TextMessage) &#123; TextMessage textMessage = (TextMessage) message; try &#123; // 打印消息 System.out.println(textMessage.getText()); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125;); // 等待监听器执行 Thread.sleep(10000); // 9. 关闭session、消息等 consumer.close(); session.close(); connection.close(); &#125; 整合spring加入依赖1234567891011121314151617&lt;!-- 加入ActiveMQ依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt; &lt;artifactId&gt;activemq-all&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 加入spring-jms依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- Spring --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;&lt;/dependency&gt; 消息发送1234567891011121314151617181920212223242526272829public static void main(String[] args) &#123;// 1. 创建spring容器ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext-activemq.xml");// 2. 从容器中获取JMSTemplate对象JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class);// 3. 从容器中获取Destination对象Destination destination = context.getBean(Destination.class);// 4. 使用JMSTemplate发送消息jmsTemplate.send(destination, new MessageCreator() &#123;@Overridepublic Message createMessage(Session session) throws JMSException &#123;// 创建消息对象TextMessage textMessage = new ActiveMQTextMessage();// 设置消息内容textMessage.setText("spring整合ActiveMQ");// 打印消息System.out.println(textMessage.getText());return textMessage;&#125;&#125;);&#125; 消息接收1234567891011121314151617181920212223public class MyMessageListener implements MessageListener &#123;@Overridepublic void onMessage(Message message) &#123;if (message instanceof TextMessage) &#123;TextMessage textMessage = (TextMessage) message;try &#123;// 获取消息内容String msg = textMessage.getText();// 打印消息System.out.println("接受消息:" + msg);&#125; catch (JMSException e) &#123;// TODO Auto-generated catch blocke.printStackTrace();&#125;&#125;&#125;&#125; queue方式配置spring1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jms="http://www.springframework.org/schema/jms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt; &lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt; &lt;bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"&gt; &lt;property name="brokerURL" value="tcp://192.168.37.161:61616" /&gt; &lt;/bean&gt; &lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt; &lt;bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory"&gt; &lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt; &lt;property name="targetConnectionFactory" ref="targetConnectionFactory" /&gt; &lt;/bean&gt; &lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt; &lt;bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"&gt; &lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt; &lt;property name="connectionFactory" ref="connectionFactory" /&gt; &lt;/bean&gt; &lt;!--这个是队列目的地，点对点的 --&gt; &lt;bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue"&gt; &lt;constructor-arg&gt; &lt;value&gt;queue&lt;/value&gt; &lt;/constructor-arg&gt; &lt;/bean&gt; &lt;!--这个是主题目的地，一对多的 --&gt; &lt;!-- &lt;bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic"&gt; --&gt; &lt;!-- &lt;constructor-arg value="topic" /&gt; --&gt; &lt;!-- &lt;/bean&gt; --&gt; &lt;!-- messageListener实现类 --&gt; &lt;bean id="myMessageListener" class="cn.itcast.activemq.spring.MyMessageListener"&gt;&lt;/bean&gt; &lt;!-- 配置一个jsm监听容器 --&gt; &lt;bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt; &lt;property name="connectionFactory" ref="connectionFactory" /&gt; &lt;property name="destination" ref="queueDestination" /&gt; &lt;property name="messageListener" ref="myMessageListener" /&gt; &lt;/bean&gt;&lt;/beans&gt; topic方式配置spring1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jms="http://www.springframework.org/schema/jms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt; &lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt; &lt;bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"&gt; &lt;property name="brokerURL" value="tcp://192.168.37.161:61616" /&gt; &lt;/bean&gt; &lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt; &lt;bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory"&gt; &lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt; &lt;property name="targetConnectionFactory" ref="targetConnectionFactory" /&gt; &lt;/bean&gt; &lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt; &lt;bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"&gt; &lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt; &lt;property name="connectionFactory" ref="connectionFactory" /&gt; &lt;/bean&gt; &lt;!--这个是队列目的地，点对点的 --&gt; &lt;!-- &lt;bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue"&gt; --&gt; &lt;!-- &lt;constructor-arg&gt; --&gt; &lt;!-- &lt;value&gt;queue&lt;/value&gt; --&gt; &lt;!-- &lt;/constructor-arg&gt; --&gt; &lt;!-- &lt;/bean&gt; --&gt; &lt;!--这个是主题目的地，一对多的 --&gt; &lt;bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic"&gt; &lt;constructor-arg value="topic" /&gt; &lt;/bean&gt; &lt;!-- messageListener实现类 --&gt; &lt;bean id="myMessageListener" class="cn.itcast.activemq.spring.MyMessageListener"&gt;&lt;/bean&gt; &lt;!-- messageListener实现类 --&gt; &lt;bean id="myMessageListener2" class="cn.itcast.activemq.spring.MyMessageListener2"&gt;&lt;/bean&gt; &lt;!-- 配置一个jsm监听容器 --&gt; &lt;bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt; &lt;property name="connectionFactory" ref="connectionFactory" /&gt; &lt;property name="destination" ref="topicDestination" /&gt; &lt;property name="messageListener" ref="myMessageListener" /&gt; &lt;/bean&gt; &lt;!-- 配置一个jsm监听容器 --&gt; &lt;bean id="jmsContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt; &lt;property name="connectionFactory" ref="connectionFactory" /&gt; &lt;property name="destination" ref="topicDestination" /&gt; &lt;property name="messageListener" ref="myMessageListener2" /&gt; &lt;/bean&gt;&lt;/beans&gt;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JMS</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
</search>
